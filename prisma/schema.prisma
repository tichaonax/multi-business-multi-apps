generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audit_logs {
  id         String   @id
  userId     String
  action     String
  entityType String
  entityId   String
  timestamp  DateTime @default(now())
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  tableName  String?
  recordId   String?
  changes    Json?
  details    Json?
  users      users    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model benefit_types {
  id                     String                   @id
  name                   String                   @unique
  description            String?
  type                   String
  createdAt              DateTime                 @default(now())
  defaultAmount          Decimal?                 @db.Decimal(12, 2)
  isActive               Boolean                  @default(true)
  isPercentage           Boolean                  @default(false)
  updatedAt              DateTime                 @default(now())
  contract_benefits      contract_benefits[]
  employee_benefits      employee_benefits[]
  payroll_entry_benefits payroll_entry_benefits[]
}

model business_accounts {
  id         String     @id
  businessId String     @unique
  balance    Decimal    @default(0) @db.Decimal(12, 2)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  createdBy  String?
  businesses businesses @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users      users?     @relation(fields: [createdBy], references: [id])
}

model business_brands {
  id                String              @id
  businessId        String
  name              String
  description       String?
  logoUrl           String?
  website           String?
  isActive          Boolean             @default(true)
  businessType      String
  attributes        Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  businesses        businesses          @relation(fields: [businessId], references: [id])
  business_products business_products[]

  @@unique([businessId, name])
}

model business_categories {
  id                        String                @id
  businessId                String
  name                      String
  description               String?
  parentId                  String?
  displayOrder              Int                   @default(0)
  isActive                  Boolean               @default(true)
  businessType              String
  attributes                Json?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime
  businesses                businesses            @relation(fields: [businessId], references: [id])
  business_categories       business_categories?  @relation("business_categoriesTobusiness_categories", fields: [parentId], references: [id])
  other_business_categories business_categories[] @relation("business_categoriesTobusiness_categories")
  business_products         business_products[]

  @@unique([businessId, name])
}

model business_customers {
  id              String            @id
  businessId      String
  customerNumber  String
  name            String
  email           String?
  phone           String?
  dateOfBirth     DateTime?
  address         String?
  city            String?
  country         String?
  customerType    CustomerType      @default(INDIVIDUAL)
  segment         String?
  loyaltyPoints   Int               @default(0)
  totalSpent      Decimal           @default(0) @db.Decimal(12, 2)
  isActive        Boolean           @default(true)
  businessType    String
  attributes      Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  businesses      businesses        @relation(fields: [businessId], references: [id])
  business_orders business_orders[]

  @@unique([businessId, customerNumber])
}

model business_memberships {
  id                   String                @id
  userId               String
  businessId           String
  role                 String                @default("employee")
  permissions          Json                  @default("{}")
  isActive             Boolean               @default(true)
  invitedBy            String?
  joinedAt             DateTime              @default(now())
  lastAccessedAt       DateTime?
  templateId           String?
  businesses           businesses            @relation(fields: [businessId], references: [id], onDelete: Cascade)
  permission_templates permission_templates? @relation(fields: [templateId], references: [id])
  users                users                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
}

model business_order_items {
  id               String           @id
  orderId          String
  productVariantId String
  quantity         Int
  unitPrice        Decimal          @db.Decimal(10, 2)
  discountAmount   Decimal          @default(0) @db.Decimal(10, 2)
  totalPrice       Decimal          @db.Decimal(10, 2)
  attributes       Json?
  createdAt        DateTime         @default(now())
  business_orders  business_orders  @relation(fields: [orderId], references: [id])
  product_variants product_variants @relation(fields: [productVariantId], references: [id])
}

model business_orders {
  id                   String                 @id
  businessId           String
  orderNumber          String
  customerId           String?
  employeeId           String?
  orderType            OrderType              @default(SALE)
  status               OrderStatus            @default(PENDING)
  subtotal             Decimal                @db.Decimal(10, 2)
  taxAmount            Decimal                @db.Decimal(10, 2)
  discountAmount       Decimal                @default(0) @db.Decimal(10, 2)
  totalAmount          Decimal                @db.Decimal(10, 2)
  paymentMethod        PaymentMethod?
  paymentStatus        PaymentStatus          @default(PENDING)
  businessType         String
  attributes           Json?
  notes                String?
  processedAt          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  business_order_items business_order_items[]
  businesses           businesses             @relation(fields: [businessId], references: [id])
  business_customers   business_customers?    @relation(fields: [customerId], references: [id])
  employees            employees?             @relation(fields: [employeeId], references: [id])

  @@unique([businessId, orderNumber])
}

model business_products {
  id                       String                     @id
  businessId               String
  name                     String
  description              String?
  sku                      String?
  barcode                  String?
  brandId                  String?
  categoryId               String
  productType              ProductType                @default(PHYSICAL)
  condition                ProductCondition           @default(NEW)
  basePrice                Decimal                    @db.Decimal(10, 2)
  costPrice                Decimal?                   @db.Decimal(10, 2)
  isActive                 Boolean                    @default(true)
  businessType             String
  attributes               Json?
  isAvailable              Boolean                    @default(true)
  spiceLevel               Int?                       @default(0)
  dietaryRestrictions      String[]
  allergens                String[]
  preparationTime          Int?                       @default(0)
  calories                 Int?
  isCombo                  Boolean                    @default(false)
  comboItemsData           Json?
  originalPrice            Decimal?                   @db.Decimal(10, 2)
  discountPercent          Decimal?                   @db.Decimal(5, 2)
  discountAmount           Decimal?                   @db.Decimal(10, 2)
  promotionStartDate       DateTime?
  promotionEndDate         DateTime?
  promotionName            String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  business_brands          business_brands?           @relation(fields: [brandId], references: [id])
  businesses               businesses                 @relation(fields: [businessId], references: [id])
  business_categories      business_categories        @relation(fields: [categoryId], references: [id])
  business_stock_movements business_stock_movements[]
  menu_combo_items         menu_combo_items[]
  product_attributes       product_attributes[]
  product_images           product_images[]
  product_variants         product_variants[]
  supplier_products        supplier_products[]

  @@unique([businessId, sku])
}

model business_stock_movements {
  id                String             @id
  businessId        String
  productVariantId  String
  movementType      StockMovementType
  quantity          Int
  unitCost          Decimal?           @db.Decimal(10, 2)
  reference         String?
  reason            String?
  employeeId        String?
  businessType      String
  attributes        Json?
  createdAt         DateTime           @default(now())
  businessProductId String?
  businesses        businesses         @relation(fields: [businessId], references: [id])
  business_products business_products? @relation(fields: [businessProductId], references: [id])
  employees         employees?         @relation(fields: [employeeId], references: [id])
  product_variants  product_variants   @relation(fields: [productVariantId], references: [id])
}

model business_suppliers {
  id                String              @id
  businessId        String
  supplierNumber    String
  name              String
  contactPerson     String?
  email             String?
  phone             String?
  address           String?
  paymentTerms      String?
  creditLimit       Decimal?            @db.Decimal(12, 2)
  isActive          Boolean             @default(true)
  businessType      String
  attributes        Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  businesses        businesses          @relation(fields: [businessId], references: [id])
  supplier_products supplier_products[]

  @@unique([businessId, supplierNumber])
}

model business_transactions {
  id            String     @id
  businessId    String
  amount        Decimal    @db.Decimal(12, 2)
  type          String
  description   String
  referenceId   String?
  referenceType String?
  balanceAfter  Decimal    @db.Decimal(12, 2)
  createdAt     DateTime   @default(now())
  createdBy     String
  notes         String?
  metadata      Json?
  businesses    businesses @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users         users      @relation(fields: [createdBy], references: [id])
}

model businesses {
  id                                                                       String                          @id
  name                                                                     String
  type                                                                     String
  description                                                              String?
  isActive                                                                 Boolean                         @default(true)
  settings                                                                 Json                            @default("{}")
  createdBy                                                                String?
  createdAt                                                                DateTime                        @default(now())
  updatedAt                                                                DateTime                        @default(now())
  umbrellaBusinessId                                                       String?
  isUmbrellaBusiness                                                       Boolean                         @default(false)
  umbrellaBusinessName                                                     String?                         @default("Demo Umbrella Company")
  umbrellaBusinessAddress                                                  String?
  umbrellaBusinessEmail                                                    String?
  umbrellaBusinessPhone                                                    String?
  umbrellaBusinessRegistration                                             String?
  shortName                                                                String?
  business_accounts                                                        business_accounts?
  business_brands                                                          business_brands[]
  business_categories                                                      business_categories[]
  business_customers                                                       business_customers[]
  business_memberships                                                     business_memberships[]
  business_orders                                                          business_orders[]
  business_products                                                        business_products[]
  business_stock_movements                                                 business_stock_movements[]
  business_suppliers                                                       business_suppliers[]
  business_transactions                                                    business_transactions[]
  businesses                                                               businesses?                     @relation("businessesTobusinesses", fields: [umbrellaBusinessId], references: [id])
  other_businesses                                                         businesses[]                    @relation("businessesTobusinesses")
  employee_business_assignments                                            employee_business_assignments[]
  employee_contracts_employee_contracts_primaryBusinessIdTobusinesses      employee_contracts[]            @relation("employee_contracts_primaryBusinessIdTobusinesses")
  employee_contracts_employee_contracts_umbrellaBusinessIdTobusinesses     employee_contracts[]            @relation("employee_contracts_umbrellaBusinessIdTobusinesses")
  employees                                                                employees[]
  inter_business_loans_inter_business_loans_borrowerBusinessIdTobusinesses inter_business_loans[]          @relation("inter_business_loans_borrowerBusinessIdTobusinesses")
  inter_business_loans_inter_business_loans_lenderBusinessIdTobusinesses   inter_business_loans[]          @relation("inter_business_loans_lenderBusinessIdTobusinesses")
  menu_combos                                                              menu_combos[]
  menu_promotions                                                          menu_promotions[]
  payroll_exports                                                          payroll_exports[]
  payroll_periods                                                          payroll_periods[]
  projects                                                                 projects[]
  vehicle_expenses                                                         vehicle_expenses[]
  vehicle_reimbursements                                                   vehicle_reimbursements[]
  vehicle_trips                                                            vehicle_trips[]
  vehicles                                                                 vehicles[]
}

model chat_messages {
  id         String      @id
  message    String
  createdAt  DateTime    @default(now())
  roomId     String?
  userId     String?
  chat_rooms chat_rooms? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  users      users?      @relation(fields: [userId], references: [id])
}

model chat_participants {
  id         String      @id
  joinedAt   DateTime    @default(now())
  roomId     String?
  userId     String?
  chat_rooms chat_rooms? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  users      users?      @relation(fields: [userId], references: [id])
}

model chat_rooms {
  id                String              @id
  name              String
  type              String              @default("group")
  createdAt         DateTime            @default(now())
  createdBy         String?
  chat_messages     chat_messages[]
  chat_participants chat_participants[]
  users             users?              @relation(fields: [createdBy], references: [id])
}

model compensation_types {
  id                   String               @id
  name                 String               @unique
  type                 String
  description          String?
  baseAmount           Decimal?             @db.Decimal(12, 2)
  commissionPercentage Decimal?             @db.Decimal(5, 2)
  createdAt            DateTime             @default(now())
  isActive             Boolean              @default(true)
  updatedAt            DateTime             @default(now())
  frequency            String?              @default("monthly")
  employee_contracts   employee_contracts[]
  employees            employees[]
}

model conflict_resolutions {
  id                 String             @id
  conflictType       ConflictType
  resolutionStrategy ResolutionStrategy
  sourceEventId      String
  targetEventId      String?
  resolvedData       Json
  resolvedBy         String?
  resolvedAt         DateTime           @default(now())
  eventIds           String[]           @default([])
  resolution         Json?
  strategy           String?
  metadata           Json?
  createdAt          DateTime           @default(now())
}

model construction_expenses {
  id                    String                 @id
  category              String
  description           String
  amount                Decimal                @db.Decimal(12, 2)
  vendor                String?
  createdAt             DateTime               @default(now())
  createdBy             String?
  projectId             String?
  receiptUrl            String?
  users                 users?                 @relation(fields: [createdBy], references: [id])
  construction_projects construction_projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model construction_projects {
  id                    String                  @id
  name                  String
  description           String?
  status                String                  @default("active")
  budget                Decimal?                @db.Decimal(12, 2)
  createdAt             DateTime                @default(now())
  createdBy             String?
  endDate               DateTime?
  startDate             DateTime?
  updatedAt             DateTime                @default(now())
  businessType          String                  @default("construction")
  projectTypeId         String?
  construction_expenses construction_expenses[]
  users                 users?                  @relation(fields: [createdBy], references: [id])
  project_types         project_types?          @relation(fields: [projectTypeId], references: [id])
  project_contractors   project_contractors[]
  project_stages        project_stages[]
  project_transactions  project_transactions[]
}

model contract_benefits {
  id                 String             @id
  amount             Decimal            @db.Decimal(12, 2)
  notes              String?
  benefitTypeId      String
  contractId         String
  createdAt          DateTime           @default(now())
  isPercentage       Boolean            @default(false)
  benefit_types      benefit_types      @relation(fields: [benefitTypeId], references: [id])
  employee_contracts employee_contracts @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model contract_renewals {
  id                                                                          String              @id
  status                                                                      String              @default("pending")
  notes                                                                       String?
  autoRenewalMonths                                                           Int?
  benefitChanges                                                              Json?
  createdAt                                                                   DateTime            @default(now())
  employeeId                                                                  String
  isAutoRenewal                                                               Boolean             @default(false)
  jobTitleChange                                                              String?
  managerNotifiedAt                                                           DateTime?
  newContractId                                                               String?
  originalContractId                                                          String
  processedAt                                                                 DateTime?
  processedBy                                                                 String?
  reminderSentAt                                                              DateTime?
  renewalDueDate                                                              DateTime
  salaryChange                                                                Decimal?            @db.Decimal(12, 2)
  salaryChangeType                                                            String?
  updatedAt                                                                   DateTime            @default(now())
  employees                                                                   employees           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employee_contracts_contract_renewals_newContractIdToemployee_contracts      employee_contracts? @relation("contract_renewals_newContractIdToemployee_contracts", fields: [newContractId], references: [id])
  employee_contracts_contract_renewals_originalContractIdToemployee_contracts employee_contracts  @relation("contract_renewals_originalContractIdToemployee_contracts", fields: [originalContractId], references: [id])
}

model data_snapshots {
  id                  String   @id
  nodeId              String
  tableName           String
  recordId            String
  snapshotData        Json
  advanceBreakdown    Json?
  advanceDeductions   Decimal  @default(0) @db.Decimal(12, 2)
  deductionsBreakdown Json?
  expectedWorkDays    Int?
  hasAdjustments      Boolean?
  isProRata           Boolean?
  loanBreakdown       Json?
  loanDeductions      Decimal  @default(0) @db.Decimal(12, 2)
  proRataCalculation  Json?
  proRataReason       String?
  processedBy         String?
  totalDeductions     Decimal  @default(0) @db.Decimal(12, 2)
}

model disciplinary_actions {
  id                                                   String    @id
  employeeId                                           String
  actionType                                           String
  violationType                                        String
  title                                                String
  description                                          String
  incidentDate                                         DateTime
  actionDate                                           DateTime
  severity                                             String    @default("low")
  isActive                                             Boolean   @default(true)
  improvementPlan                                      String?
  followUpDate                                         DateTime?
  followUpNotes                                        String?
  createdBy                                            String
  hrReviewed                                           Boolean   @default(false)
  hrReviewedBy                                         String?
  hrReviewedAt                                         DateTime?
  hrNotes                                              String?
  employeeAcknowledged                                 Boolean   @default(false)
  employeeResponse                                     String?
  employeeSignedAt                                     DateTime?
  attachments                                          String[]
  createdAt                                            DateTime  @default(now())
  updatedAt                                            DateTime  @default(now())
  employees_disciplinary_actions_createdByToemployees  employees @relation("disciplinary_actions_createdByToemployees", fields: [createdBy], references: [id], map: "disciplinary_actions_created_by_fkey")
  employees_disciplinary_actions_employeeIdToemployees employees @relation("disciplinary_actions_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade, map: "disciplinary_actions_employee_id_fkey")
}

model driver_authorizations {
  id                 String             @id
  driverId           String
  vehicleId          String
  authorizedBy       String
  authorizedDate     DateTime
  expiryDate         DateTime?
  isActive           Boolean            @default(true)
  authorizationLevel AuthorizationLevel @default(BASIC)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  users              users              @relation(fields: [authorizedBy], references: [id])
  vehicle_drivers    vehicle_drivers    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicles           vehicles           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicle_trips      vehicle_trips[]

  @@unique([driverId, vehicleId])
}

model driver_license_templates {
  id          String      @id
  name        String
  description String?
  pattern     String
  example     String
  countryCode String?
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)
  updatedAt   DateTime    @default(now())
  employees   employees[]
  persons     persons[]
}

model employee_allowances {
  id                                                  String     @id
  employeeId                                          String
  type                                                String
  amount                                              Decimal    @db.Decimal(12, 2)
  description                                         String?
  payrollMonth                                        Int
  payrollYear                                         Int
  approvedBy                                          String?
  approvedAt                                          DateTime?
  createdAt                                           DateTime   @default(now())
  employees_employee_allowances_approvedByToemployees employees? @relation("employee_allowances_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_allowances_employeeIdToemployees employees  @relation("employee_allowances_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_attendance {
  id          String    @id
  date        DateTime
  status      String    @default("present")
  notes       String?
  checkIn     DateTime?
  checkOut    DateTime?
  createdAt   DateTime  @default(now())
  employeeId  String
  hoursWorked Decimal?  @db.Decimal(4, 2)
  employees   employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
}

model employee_benefits {
  id            String        @id
  amount        Decimal       @db.Decimal(12, 2)
  notes         String?
  benefitTypeId String
  createdAt     DateTime      @default(now())
  effectiveDate DateTime
  employeeId    String
  endDate       DateTime?
  isActive      Boolean       @default(true)
  isPercentage  Boolean       @default(false)
  updatedAt     DateTime      @default(now())
  benefit_types benefit_types @relation(fields: [benefitTypeId], references: [id])
  employees     employees     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_bonuses {
  id                                               String     @id
  amount                                           Decimal    @db.Decimal(12, 2)
  approvedAt                                       DateTime?
  approvedBy                                       String?
  createdAt                                        DateTime   @default(now())
  employeeId                                       String
  reason                                           String?
  type                                             String
  employees_employee_bonuses_approvedByToemployees employees? @relation("employee_bonuses_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_bonuses_employeeIdToemployees employees  @relation("employee_bonuses_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_business_assignments {
  id         String     @id
  role       String?
  notes      String?
  assignedBy String?
  businessId String
  createdAt  DateTime   @default(now())
  employeeId String
  endDate    DateTime?
  isActive   Boolean    @default(true)
  isPrimary  Boolean    @default(false)
  startDate  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  businesses businesses @relation(fields: [businessId], references: [id])
  employees  employees  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, businessId])
}

model employee_contracts {
  id                                                                         String               @id
  version                                                                    Int                  @default(1)
  status                                                                     String               @default("draft")
  notes                                                                      String?
  additionalBusinesses                                                       String[]
  approvedAt                                                                 DateTime?
  approvedBy                                                                 String?
  baseSalary                                                                 Decimal              @db.Decimal(12, 2)
  compensationTypeId                                                         String
  contractNumber                                                             String               @unique
  createdAt                                                                  DateTime             @default(now())
  createdBy                                                                  String?
  customResponsibilities                                                     String?
  employeeId                                                                 String
  employeeSignedAt                                                           DateTime?
  endDate                                                                    DateTime?
  isCommissionBased                                                          Boolean              @default(false)
  isSalaryBased                                                              Boolean              @default(true)
  jobTitleId                                                                 String
  managerSignedAt                                                            DateTime?
  pdfUrl                                                                     String?
  primaryBusinessId                                                          String
  probationPeriodMonths                                                      Int?
  signedPdfUrl                                                               String?
  startDate                                                                  DateTime
  supervisorId                                                               String?
  supervisorName                                                             String?
  supervisorTitle                                                            String?
  updatedAt                                                                  DateTime             @default(now())
  commissionAmount                                                           Decimal?             @db.Decimal(12, 2)
  contractDurationMonths                                                     Int?
  livingAllowance                                                            Decimal?             @db.Decimal(12, 2)
  pdfGenerationData                                                          Json?
  umbrellaBusinessId                                                         String?
  umbrellaBusinessName                                                       String?              @default("Demo Umbrella Company")
  businessAssignments                                                        Json?
  previousContractId                                                         String?
  copiedFromContractId                                                       String?
  isRenewal                                                                  Boolean              @default(false)
  originalContractId                                                         String?
  renewalCount                                                               Int                  @default(0)
  contract_benefits                                                          contract_benefits[]
  contract_renewals_contract_renewals_newContractIdToemployee_contracts      contract_renewals[]  @relation("contract_renewals_newContractIdToemployee_contracts")
  contract_renewals_contract_renewals_originalContractIdToemployee_contracts contract_renewals[]  @relation("contract_renewals_originalContractIdToemployee_contracts")
  compensation_types                                                         compensation_types   @relation(fields: [compensationTypeId], references: [id])
  employees_employee_contracts_employeeIdToemployees                         employees            @relation("employee_contracts_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
  job_titles                                                                 job_titles           @relation(fields: [jobTitleId], references: [id])
  employee_contracts                                                         employee_contracts?  @relation("employee_contractsToemployee_contracts", fields: [previousContractId], references: [id])
  other_employee_contracts                                                   employee_contracts[] @relation("employee_contractsToemployee_contracts")
  businesses_employee_contracts_primaryBusinessIdTobusinesses                businesses           @relation("employee_contracts_primaryBusinessIdTobusinesses", fields: [primaryBusinessId], references: [id])
  employees_employee_contracts_supervisorIdToemployees                       employees?           @relation("employee_contracts_supervisorIdToemployees", fields: [supervisorId], references: [id])
  businesses_employee_contracts_umbrellaBusinessIdTobusinesses               businesses?          @relation("employee_contracts_umbrellaBusinessIdTobusinesses", fields: [umbrellaBusinessId], references: [id])
}

model employee_deduction_payments {
  id                  String              @id
  amount              Decimal             @db.Decimal(12, 2)
  createdAt           DateTime            @default(now())
  deductionId         String
  paymentDate         DateTime
  processedBy         String?
  employee_deductions employee_deductions @relation(fields: [deductionId], references: [id], onDelete: Cascade)
  employees           employees?          @relation(fields: [processedBy], references: [id])
}

model employee_deductions {
  id                                                  String                        @id
  amount                                              Decimal                       @db.Decimal(12, 2)
  approvedAt                                          DateTime?
  approvedBy                                          String?
  createdAt                                           DateTime                      @default(now())
  employeeId                                          String
  reason                                              String?
  type                                                String
  employee_deduction_payments                         employee_deduction_payments[]
  employees_employee_deductions_approvedByToemployees employees?                    @relation("employee_deductions_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_deductions_employeeIdToemployees employees                     @relation("employee_deductions_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_leave_balance {
  id              String    @id
  year            Int
  annualLeaveDays Int       @default(0)
  createdAt       DateTime  @default(now())
  employeeId      String
  remainingAnnual Int       @default(0)
  remainingSick   Int       @default(0)
  sickLeaveDays   Int       @default(0)
  updatedAt       DateTime
  usedAnnualDays  Int       @default(0)
  usedSickDays    Int       @default(0)
  employees       employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, year])
}

model employee_leave_requests {
  id                                                      String     @id
  reason                                                  String?
  status                                                  String     @default("pending")
  approvedAt                                              DateTime?
  approvedBy                                              String?
  createdAt                                               DateTime   @default(now())
  daysRequested                                           Int
  employeeId                                              String
  endDate                                                 DateTime
  leaveType                                               String
  rejectionReason                                         String?
  startDate                                               DateTime
  updatedAt                                               DateTime
  employees_employee_leave_requests_approvedByToemployees employees? @relation("employee_leave_requests_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_leave_requests_employeeIdToemployees employees  @relation("employee_leave_requests_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_loan_payments {
  id             String         @id
  amount         Decimal        @db.Decimal(12, 2)
  createdAt      DateTime       @default(now())
  loanId         String
  paymentDate    DateTime
  processedBy    String?
  employee_loans employee_loans @relation(fields: [loanId], references: [id], onDelete: Cascade)
  employees      employees?     @relation(fields: [processedBy], references: [id])
}

model employee_loans {
  id                                             String                   @id
  status                                         String                   @default("active")
  approvedAt                                     DateTime?
  approvedBy                                     String?
  createdAt                                      DateTime                 @default(now())
  employeeId                                     String
  loanAmount                                     Decimal                  @db.Decimal(12, 2)
  monthlyDeduction                               Decimal                  @db.Decimal(12, 2)
  remainingBalance                               Decimal                  @db.Decimal(12, 2)
  remainingMonths                                Int
  totalMonths                                    Int
  updatedAt                                      DateTime
  employee_loan_payments                         employee_loan_payments[]
  employees_employee_loans_approvedByToemployees employees?               @relation("employee_loans_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_loans_employeeIdToemployees employees                @relation("employee_loans_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_salary_increases {
  id                                                        String     @id
  reason                                                    String?
  approvedAt                                                DateTime?
  approvedBy                                                String?
  createdAt                                                 DateTime   @default(now())
  effectiveDate                                             DateTime
  employeeId                                                String
  increaseAmount                                            Decimal    @db.Decimal(12, 2)
  increasePercent                                           Decimal    @db.Decimal(5, 2)
  newSalary                                                 Decimal    @db.Decimal(12, 2)
  previousSalary                                            Decimal    @db.Decimal(12, 2)
  employees_employee_salary_increases_approvedByToemployees employees? @relation("employee_salary_increases_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_salary_increases_employeeIdToemployees employees  @relation("employee_salary_increases_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
}

model employee_time_tracking {
  id            String    @id
  employeeId    String
  year          Int
  month         Int
  workDays      Int       @default(0)
  totalHours    Decimal?  @db.Decimal(5, 2)
  overtimeHours Decimal?  @db.Decimal(5, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  employees     employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, year, month])
}

model employees {
  id                                                                        String                          @id
  email                                                                     String?                         @unique
  phone                                                                     String
  address                                                                   String?
  employmentStatus                                                          String                          @default("active")
  notes                                                                     String?
  compensationTypeId                                                        String
  createdAt                                                                 DateTime                        @default(now())
  createdBy                                                                 String?
  customResponsibilities                                                    String?
  dateOfBirth                                                               DateTime?
  employeeNumber                                                            String                          @unique
  firstName                                                                 String
  fullName                                                                  String
  hireDate                                                                  DateTime
  idFormatTemplateId                                                        String?
  isActive                                                                  Boolean                         @default(true)
  jobTitleId                                                                String
  lastName                                                                  String
  nationalId                                                                String                          @unique
  primaryBusinessId                                                         String
  profilePhotoUrl                                                           String?
  startDate                                                                 DateTime?
  supervisorId                                                              String?
  terminationDate                                                           DateTime?
  updatedAt                                                                 DateTime                        @default(now())
  userId                                                                    String?                         @unique
  driverLicenseNumber                                                       String?
  driverLicenseTemplateId                                                   String?
  business_orders                                                           business_orders[]
  business_stock_movements                                                  business_stock_movements[]
  contract_renewals                                                         contract_renewals[]
  disciplinary_actions_disciplinary_actions_createdByToemployees            disciplinary_actions[]          @relation("disciplinary_actions_createdByToemployees")
  disciplinary_actions_disciplinary_actions_employeeIdToemployees           disciplinary_actions[]          @relation("disciplinary_actions_employeeIdToemployees")
  employee_allowances_employee_allowances_approvedByToemployees             employee_allowances[]           @relation("employee_allowances_approvedByToemployees")
  employee_allowances_employee_allowances_employeeIdToemployees             employee_allowances[]           @relation("employee_allowances_employeeIdToemployees")
  employee_attendance                                                       employee_attendance[]
  employee_benefits                                                         employee_benefits[]
  employee_bonuses_employee_bonuses_approvedByToemployees                   employee_bonuses[]              @relation("employee_bonuses_approvedByToemployees")
  employee_bonuses_employee_bonuses_employeeIdToemployees                   employee_bonuses[]              @relation("employee_bonuses_employeeIdToemployees")
  employee_business_assignments                                             employee_business_assignments[]
  employee_contracts_employee_contracts_employeeIdToemployees               employee_contracts[]            @relation("employee_contracts_employeeIdToemployees")
  employee_contracts_employee_contracts_supervisorIdToemployees             employee_contracts[]            @relation("employee_contracts_supervisorIdToemployees")
  employee_deduction_payments                                               employee_deduction_payments[]
  employee_deductions_employee_deductions_approvedByToemployees             employee_deductions[]           @relation("employee_deductions_approvedByToemployees")
  employee_deductions_employee_deductions_employeeIdToemployees             employee_deductions[]           @relation("employee_deductions_employeeIdToemployees")
  employee_leave_balance                                                    employee_leave_balance[]
  employee_leave_requests_employee_leave_requests_approvedByToemployees     employee_leave_requests[]       @relation("employee_leave_requests_approvedByToemployees")
  employee_leave_requests_employee_leave_requests_employeeIdToemployees     employee_leave_requests[]       @relation("employee_leave_requests_employeeIdToemployees")
  employee_loan_payments                                                    employee_loan_payments[]
  employee_loans_employee_loans_approvedByToemployees                       employee_loans[]                @relation("employee_loans_approvedByToemployees")
  employee_loans_employee_loans_employeeIdToemployees                       employee_loans[]                @relation("employee_loans_employeeIdToemployees")
  employee_salary_increases_employee_salary_increases_approvedByToemployees employee_salary_increases[]     @relation("employee_salary_increases_approvedByToemployees")
  employee_salary_increases_employee_salary_increases_employeeIdToemployees employee_salary_increases[]     @relation("employee_salary_increases_employeeIdToemployees")
  employee_time_tracking                                                    employee_time_tracking[]
  compensation_types                                                        compensation_types              @relation(fields: [compensationTypeId], references: [id])
  driver_license_templates                                                  driver_license_templates?       @relation(fields: [driverLicenseTemplateId], references: [id])
  id_format_templates                                                       id_format_templates?            @relation(fields: [idFormatTemplateId], references: [id])
  job_titles                                                                job_titles                      @relation(fields: [jobTitleId], references: [id])
  businesses                                                                businesses                      @relation(fields: [primaryBusinessId], references: [id])
  employees                                                                 employees?                      @relation("employeesToemployees", fields: [supervisorId], references: [id])
  other_employees                                                           employees[]                     @relation("employeesToemployees")
  users                                                                     users?                          @relation(fields: [userId], references: [id])
  payroll_entries                                                           payroll_entries[]
}

model expense_categories {
  id        String   @id
  name      String
  emoji     String?  @default("💰")
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  isDefault Boolean  @default(false)
  userId    String?
  users     users?   @relation(fields: [userId], references: [id])
}

model fund_sources {
  id         String   @id
  name       String
  emoji      String?  @default("💰")
  createdAt  DateTime @default(now())
  isDefault  Boolean  @default(false)
  usageCount Int      @default(0)
  userId     String?
  users      users?   @relation(fields: [userId], references: [id])
}

model id_format_templates {
  id          String      @id
  name        String
  description String?
  pattern     String
  example     String
  countryCode String?
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)
  updatedAt   DateTime    @default(now())
  employees   employees[]
  persons     persons[]
}

model initial_load_sessions {
  id               String    @id
  sessionId        String    @unique
  sourceNodeId     String
  targetNodeId     String
  tableName        String
  totalRecords     Int       @default(0)
  processedRecords Int       @default(0)
  status           String    @default("PENDING")
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  errorMessage     String?
  batchSize        Int       @default(1000)
  currentBatch     Int       @default(0)
  metadata         Json?
  createdAt        DateTime  @default(now())
}

model inter_business_loans {
  id                                                             String              @id
  loanNumber                                                     String              @unique
  principalAmount                                                Decimal             @db.Decimal(12, 2)
  interestRate                                                   Decimal             @default(0) @db.Decimal(5, 2)
  totalAmount                                                    Decimal             @db.Decimal(12, 2)
  remainingBalance                                               Decimal             @db.Decimal(12, 2)
  lenderType                                                     String
  lenderUserId                                                   String?
  lenderBusinessId                                               String?
  borrowerBusinessId                                             String?
  loanDate                                                       DateTime
  dueDate                                                        DateTime?
  status                                                         String              @default("active")
  terms                                                          String?
  notes                                                          String?
  createdAt                                                      DateTime            @default(now())
  updatedAt                                                      DateTime
  createdBy                                                      String
  borrowerPersonId                                               String?
  borrowerType                                                   String
  businesses_inter_business_loans_borrowerBusinessIdTobusinesses businesses?         @relation("inter_business_loans_borrowerBusinessIdTobusinesses", fields: [borrowerBusinessId], references: [id])
  persons                                                        persons?            @relation(fields: [borrowerPersonId], references: [id])
  users_inter_business_loans_createdByTousers                    users               @relation("inter_business_loans_createdByTousers", fields: [createdBy], references: [id])
  businesses_inter_business_loans_lenderBusinessIdTobusinesses   businesses?         @relation("inter_business_loans_lenderBusinessIdTobusinesses", fields: [lenderBusinessId], references: [id])
  users_inter_business_loans_lenderUserIdTousers                 users?              @relation("inter_business_loans_lenderUserIdTousers", fields: [lenderUserId], references: [id])
  loan_transactions                                              loan_transactions[]
}

model job_titles {
  id                 String               @id
  title              String               @unique
  description        String?
  responsibilities   String[]
  department         String?
  level              String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  employee_contracts employee_contracts[]
  employees          employees[]
}

model loan_transactions {
  id                    String               @id
  loanId                String
  transactionType       String
  amount                Decimal              @db.Decimal(12, 2)
  description           String?
  transactionDate       DateTime
  personalExpenseId     String?
  businessTransactionId String?
  isAutoGenerated       Boolean              @default(false)
  autoGeneratedNote     String?
  initiatedFrom         String?
  balanceAfter          Decimal              @db.Decimal(12, 2)
  createdAt             DateTime             @default(now())
  createdBy             String
  users                 users                @relation(fields: [createdBy], references: [id])
  inter_business_loans  inter_business_loans @relation(fields: [loanId], references: [id], onDelete: Cascade)
  personal_expenses     personal_expenses?   @relation(fields: [personalExpenseId], references: [id])
}

model menu_combo_items {
  id                String            @id
  comboId           String
  productId         String
  variantId         String?
  quantity          Int               @default(1)
  isRequired        Boolean           @default(true)
  sortOrder         Int               @default(0)
  createdAt         DateTime          @default(now())
  menu_combos       menu_combos       @relation(fields: [comboId], references: [id], onDelete: Cascade)
  business_products business_products @relation(fields: [productId], references: [id], onDelete: Cascade)
  product_variants  product_variants? @relation(fields: [variantId], references: [id])
}

model menu_combos {
  id                 String             @id
  businessId         String
  name               String
  description        String?
  totalPrice         Decimal            @db.Decimal(10, 2)
  originalTotalPrice Decimal?           @db.Decimal(10, 2)
  isActive           Boolean            @default(true)
  isAvailable        Boolean            @default(true)
  imageUrl           String?
  preparationTime    Int                @default(0)
  discountPercent    Decimal?           @db.Decimal(5, 2)
  promotionStartDate DateTime?
  promotionEndDate   DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  menu_combo_items   menu_combo_items[]
  businesses         businesses         @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model menu_items {
  id          String        @id
  name        String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  category    String
  barcode     String?
  createdAt   DateTime      @default(now())
  isAvailable Boolean       @default(true)
  updatedAt   DateTime      @default(now())
  order_items order_items[]
}

model menu_promotions {
  id                   String        @id
  businessId           String
  name                 String
  description          String?
  type                 PromotionType
  value                Decimal       @db.Decimal(10, 2)
  minOrderAmount       Decimal?      @db.Decimal(10, 2)
  maxDiscountAmount    Decimal?      @db.Decimal(10, 2)
  startDate            DateTime
  endDate              DateTime?
  startTime            String?
  endTime              String?
  daysOfWeek           String[]
  isActive             Boolean       @default(true)
  usageLimit           Int?
  usageCount           Int           @default(0)
  applicableCategories String[]
  applicableProducts   String[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  businesses           businesses    @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model network_partitions {
  id                 String    @id
  nodeId             String
  partitionType      String
  startTime          DateTime
  detectedAt         DateTime
  isResolved         Boolean   @default(false)
  endTime            DateTime?
  partitionMetadata  Json?
  resolutionMetadata Json?
  createdAt          DateTime  @default(now())
}

model node_states {
  id          String   @id
  nodeId      String   @unique
  nodeName    String
  lastSeen    DateTime @default(now())
  isOnline    Boolean  @default(false)
  syncVersion String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model offline_queue {
  id           String    @id
  nodeId       String
  eventId      String
  tableName    String
  recordId     String
  operation    String
  changeData   Json
  beforeData   Json?
  queuedAt     DateTime  @default(now())
  priority     Int       @default(5)
  retryCount   Int       @default(0)
  lastAttempt  DateTime?
  errorMessage String?
  dependencies Json?
  isProcessed  Boolean   @default(false)
}

model order_items {
  id         String      @id
  quantity   Int
  price      Decimal     @db.Decimal(10, 2)
  notes      String?
  menuItemId String?
  orderId    String?
  menu_items menu_items? @relation(fields: [menuItemId], references: [id])
  orders     orders?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model orders {
  id          String        @id
  total       Decimal       @db.Decimal(10, 2)
  status      String        @default("pending")
  createdAt   DateTime      @default(now())
  createdBy   String?
  orderNumber String        @unique
  tableNumber String?
  order_items order_items[]
  users       users?        @relation(fields: [createdBy], references: [id])
}

model payroll_adjustments {
  id                                          String           @id
  payrollEntryId                              String?
  amount                                      Decimal          @db.Decimal(12, 2)
  reason                                      String?
  createdAt                                   DateTime         @default(now())
  createdBy                                   String?
  adjustmentType                              String?
  approvedAt                                  DateTime?
  approvedBy                                  String?
  status                                      String           @default("pending")
  updatedAt                                   DateTime         @default(now())
  users_payroll_adjustments_approvedByTousers users?           @relation("payroll_adjustments_approvedByTousers", fields: [approvedBy], references: [id])
  users_payroll_adjustments_createdByTousers  users?           @relation("payroll_adjustments_createdByTousers", fields: [createdBy], references: [id])
  payroll_entries                             payroll_entries? @relation(fields: [payrollEntryId], references: [id], onDelete: Cascade)

  @@index([payrollEntryId])
}

model payroll_entries {
  id                      String                   @id
  payrollPeriodId         String?
  employeeId              String?
  employeeNumber          String?
  employeeName            String?
  nationalId              String?
  overtimeHours           Decimal                  @default(0) @db.Decimal(10, 2)
  baseSalary              Decimal                  @default(0) @db.Decimal(12, 2)
  commission              Decimal                  @default(0) @db.Decimal(12, 2)
  livingAllowance         Decimal                  @default(0) @db.Decimal(12, 2)
  vehicleAllowance        Decimal                  @default(0) @db.Decimal(12, 2)
  travelAllowance         Decimal                  @default(0) @db.Decimal(12, 2)
  overtimePay             Decimal                  @default(0) @db.Decimal(12, 2)
  benefitsTotal           Decimal                  @default(0) @db.Decimal(12, 2)
  benefitsBreakdown       Json?
  loanDeductions          Decimal                  @default(0) @db.Decimal(12, 2)
  advanceDeductions       Decimal                  @default(0) @db.Decimal(12, 2)
  advanceBreakdown        Json?
  miscDeductions          Decimal                  @default(0) @db.Decimal(12, 2)
  grossPay                Decimal                  @default(0) @db.Decimal(12, 2)
  totalDeductions         Decimal                  @default(0) @db.Decimal(12, 2)
  netPay                  Decimal                  @default(0) @db.Decimal(12, 2)
  adjustmentsTotal        Decimal                  @default(0) @db.Decimal(12, 2)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  notes                   String?
  absenceDays             Int                      @default(0)
  dateOfBirth             DateTime?
  hireDate                DateTime?
  leaveDays               Int                      @default(0)
  processedBy             String?
  sickDays                Int                      @default(0)
  terminationDate         DateTime?
  workDays                Int                      @default(0)
  absenceFraction         Decimal                  @default(0) @db.Decimal(4, 2)
  contractEndDate         DateTime?
  contractId              String?
  contractNumber          String?
  contractStartDate       DateTime?
  isProrated              Boolean                  @default(false)
  doubleTimeOvertimeHours Decimal                  @default(0) @db.Decimal(10, 2)
  standardOvertimeHours   Decimal                  @default(0) @db.Decimal(10, 2)
  contractSnapshot        Json?
  payroll_adjustments     payroll_adjustments[]
  employees               employees?               @relation(fields: [employeeId], references: [id])
  payroll_periods         payroll_periods?         @relation(fields: [payrollPeriodId], references: [id], onDelete: Cascade)
  users                   users?                   @relation(fields: [processedBy], references: [id])
  payroll_entry_benefits  payroll_entry_benefits[]

  @@index([contractId])
  @@index([employeeId])
  @@index([payrollPeriodId])
}

model payroll_entry_benefits {
  id                String          @id
  payrollEntryId    String
  benefitTypeId     String
  benefitName       String
  amount            Decimal         @db.Decimal(12, 2)
  isActive          Boolean         @default(true)
  deactivatedReason String?
  source            String          @default("contract")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  benefit_types     benefit_types   @relation(fields: [benefitTypeId], references: [id], onDelete: Cascade)
  payroll_entries   payroll_entries @relation(fields: [payrollEntryId], references: [id], onDelete: Cascade)

  @@index([benefitTypeId])
  @@index([payrollEntryId])
}

model payroll_exports {
  id              String          @id
  payrollPeriodId String
  businessId      String
  year            Int
  month           Int
  fileName        String
  fileUrl         String
  fileSize        Int
  format          String          @default("excel")
  includesMonths  Int[]
  employeeCount   Int
  totalGrossPay   Decimal         @db.Decimal(12, 2)
  totalNetPay     Decimal         @db.Decimal(12, 2)
  exportedAt      DateTime?
  exportedBy      String
  generationType  String
  notes           String?
  businesses      businesses      @relation(fields: [businessId], references: [id], map: "payroll_exports_businessid_fkey")
  users           users           @relation(fields: [exportedBy], references: [id], map: "payroll_exports_exportedby_fkey")
  payroll_periods payroll_periods @relation(fields: [payrollPeriodId], references: [id], map: "payroll_exports_payrollperiodid_fkey")
}

model payroll_periods {
  id                                      String            @id
  businessId                              String
  year                                    Int
  month                                   Int
  periodStart                             DateTime?
  periodEnd                               DateTime?
  status                                  String            @default("draft")
  totalEmployees                          Int               @default(0)
  totalGrossPay                           Decimal           @default(0) @db.Decimal(12, 2)
  totalDeductions                         Decimal           @default(0) @db.Decimal(12, 2)
  totalNetPay                             Decimal           @default(0) @db.Decimal(12, 2)
  createdAt                               DateTime          @default(now())
  createdBy                               String?
  approvedAt                              DateTime?
  approvedBy                              String?
  exportedAt                              DateTime?
  closedAt                                DateTime?
  notes                                   String?
  updatedAt                               DateTime          @default(now())
  payroll_entries                         payroll_entries[]
  payroll_exports                         payroll_exports[]
  users_payroll_periods_approvedByTousers users?            @relation("payroll_periods_approvedByTousers", fields: [approvedBy], references: [id])
  businesses                              businesses        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users_payroll_periods_createdByTousers  users?            @relation("payroll_periods_createdByTousers", fields: [createdBy], references: [id])

  @@unique([businessId, year, month])
  @@index([businessId])
  @@index([year, month])
}

model permission_templates {
  id                   String                 @id
  name                 String
  permissions          Json                   @default("{}")
  businessType         String
  createdAt            DateTime               @default(now())
  createdBy            String
  isActive             Boolean                @default(true)
  updatedAt            DateTime               @default(now())
  business_memberships business_memberships[]
  users                users                  @relation(fields: [createdBy], references: [id])
}

model personal_budgets {
  id          String   @id
  amount      Decimal  @db.Decimal(12, 2)
  description String?
  type        String   @default("deposit")
  createdAt   DateTime @default(now())
  userId      String?
  users       users?   @relation(fields: [userId], references: [id])
}

model personal_expenses {
  id                   String                 @id
  category             String
  description          String
  amount               Decimal                @db.Decimal(12, 2)
  date                 DateTime
  tags                 String?
  createdAt            DateTime               @default(now())
  receiptUrl           String?
  userId               String?
  notes                String?
  updatedAt            DateTime               @default(now())
  loan_transactions    loan_transactions[]
  users                users?                 @relation(fields: [userId], references: [id])
  project_transactions project_transactions[]
}

model persons {
  id                       String                    @id
  email                    String?                   @unique
  phone                    String
  address                  String?
  notes                    String?
  createdAt                DateTime                  @default(now())
  createdBy                String?
  fullName                 String
  idFormatTemplateId       String?
  isActive                 Boolean                   @default(true)
  nationalId               String                    @unique
  updatedAt                DateTime                  @default(now())
  driverLicenseNumber      String?
  driverLicenseTemplateId  String?
  inter_business_loans     inter_business_loans[]
  users                    users?                    @relation(fields: [createdBy], references: [id])
  driver_license_templates driver_license_templates? @relation(fields: [driverLicenseTemplateId], references: [id])
  id_format_templates      id_format_templates?      @relation(fields: [idFormatTemplateId], references: [id])
  project_contractors      project_contractors[]
  project_transactions     project_transactions[]
}

model product_attributes {
  id                String            @id
  productId         String
  key               String
  value             String
  dataType          AttributeDataType @default(TEXT)
  displayOrder      Int               @default(0)
  createdAt         DateTime          @default(now())
  business_products business_products @relation(fields: [productId], references: [id])

  @@unique([productId, key])
}

model product_images {
  id                String            @id
  productId         String
  imageUrl          String
  altText           String?
  isPrimary         Boolean           @default(false)
  sortOrder         Int               @default(0)
  imageSize         ImageSize         @default(MEDIUM)
  businessType      String
  attributes        Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  business_products business_products @relation(fields: [productId], references: [id])
}

model product_variants {
  id                       String                     @id
  productId                String
  name                     String?
  sku                      String                     @unique
  barcode                  String?
  price                    Decimal?                   @db.Decimal(10, 2)
  stockQuantity            Int                        @default(0)
  reorderLevel             Int                        @default(0)
  isActive                 Boolean                    @default(true)
  attributes               Json?
  isAvailable              Boolean                    @default(true)
  originalPrice            Decimal?                   @db.Decimal(10, 2)
  discountPercent          Decimal?                   @db.Decimal(5, 2)
  discountAmount           Decimal?                   @db.Decimal(10, 2)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  business_order_items     business_order_items[]
  business_stock_movements business_stock_movements[]
  menu_combo_items         menu_combo_items[]
  business_products        business_products          @relation(fields: [productId], references: [id])
}

model project_contractors {
  id                           String                         @id
  role                         String?
  status                       String                         @default("active")
  notes                        String?
  createdAt                    DateTime                       @default(now())
  endDate                      DateTime?
  hourlyRate                   Decimal?                       @db.Decimal(12, 2)
  isPrimary                    Boolean                        @default(false)
  personId                     String
  projectId                    String
  startDate                    DateTime?
  totalContractAmount          Decimal?                       @db.Decimal(12, 2)
  updatedAt                    DateTime                       @default(now())
  constructionProjectId        String?
  construction_projects        construction_projects?         @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  persons                      persons                        @relation(fields: [personId], references: [id], onDelete: Cascade)
  projects                     projects                       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  project_transactions         project_transactions[]
  stage_contractor_assignments stage_contractor_assignments[]

  @@unique([projectId, personId])
}

model project_stages {
  id                           String                         @id
  name                         String
  description                  String?
  status                       String                         @default("pending")
  notes                        String?
  completionDate               DateTime?
  createdAt                    DateTime                       @default(now())
  endDate                      DateTime?
  estimatedAmount              Decimal?                       @db.Decimal(12, 2)
  orderIndex                   Int                            @default(0)
  projectId                    String
  startDate                    DateTime?
  updatedAt                    DateTime                       @default(now())
  constructionProjectId        String?
  construction_projects        construction_projects?         @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  projects                     projects                       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  project_transactions         project_transactions[]
  stage_contractor_assignments stage_contractor_assignments[]
}

model project_transactions {
  id                                           String                        @id
  amount                                       Decimal                       @db.Decimal(12, 2)
  description                                  String
  status                                       String                        @default("pending")
  notes                                        String?
  approvedAt                                   DateTime?
  approvedBy                                   String?
  createdAt                                    DateTime                      @default(now())
  createdBy                                    String?
  paidAt                                       DateTime?
  paymentCategory                              String?
  paymentMethod                                String?
  personalExpenseId                            String
  projectContractorId                          String?
  projectId                                    String
  receiptUrl                                   String?
  recipientPersonId                            String?
  referenceNumber                              String?
  stageAssignmentId                            String?
  stageId                                      String?
  transactionType                              String
  updatedAt                                    DateTime                      @default(now())
  constructionProjectId                        String?
  transactionSubType                           String?
  users_project_transactions_approvedByTousers users?                        @relation("project_transactions_approvedByTousers", fields: [approvedBy], references: [id])
  construction_projects                        construction_projects?        @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  users_project_transactions_createdByTousers  users?                        @relation("project_transactions_createdByTousers", fields: [createdBy], references: [id])
  personal_expenses                            personal_expenses             @relation(fields: [personalExpenseId], references: [id], onDelete: Cascade)
  project_contractors                          project_contractors?          @relation(fields: [projectContractorId], references: [id])
  projects                                     projects                      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  persons                                      persons?                      @relation(fields: [recipientPersonId], references: [id])
  stage_contractor_assignments                 stage_contractor_assignments? @relation(fields: [stageAssignmentId], references: [id])
  project_stages                               project_stages?               @relation(fields: [stageId], references: [id])
}

model project_types {
  id                    String                  @id
  name                  String                  @unique
  description           String?
  businessType          String
  isActive              Boolean                 @default(true)
  isSystem              Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  construction_projects construction_projects[]
  projects              projects[]
}

model projects {
  id                   String                 @id
  name                 String
  description          String?
  projectTypeId        String
  businessType         String
  businessId           String?
  status               String                 @default("active")
  budget               Decimal?               @db.Decimal(12, 2)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime               @default(now())
  createdBy            String?
  updatedAt            DateTime               @default(now())
  project_contractors  project_contractors[]
  project_stages       project_stages[]
  project_transactions project_transactions[]
  businesses           businesses?            @relation(fields: [businessId], references: [id])
  users                users?                 @relation(fields: [createdBy], references: [id])
  project_types        project_types          @relation(fields: [projectTypeId], references: [id])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model stage_contractor_assignments {
  id                   String                 @id
  notes                String?
  createdAt            DateTime               @default(now())
  depositAmount        Decimal?               @db.Decimal(12, 2)
  depositPaidDate      DateTime?
  depositPercentage    Decimal                @default(0.00) @db.Decimal(5, 2)
  finalPaymentDate     DateTime?
  isDepositPaid        Boolean                @default(false)
  isFinalPaymentMade   Boolean                @default(false)
  predeterminedAmount  Decimal                @db.Decimal(12, 2)
  projectContractorId  String
  stageId              String
  updatedAt            DateTime               @default(now())
  project_transactions project_transactions[]
  project_contractors  project_contractors    @relation(fields: [projectContractorId], references: [id], onDelete: Cascade)
  project_stages       project_stages         @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([stageId, projectContractorId])
}

model supplier_products {
  id                 String             @id
  supplierId         String
  productId          String
  supplierSku        String?
  supplierPrice      Decimal            @db.Decimal(10, 2)
  minimumOrder       Int                @default(1)
  leadTimeDays       Int                @default(0)
  isActive           Boolean            @default(true)
  attributes         Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  business_products  business_products  @relation(fields: [productId], references: [id])
  business_suppliers business_suppliers @relation(fields: [supplierId], references: [id])

  @@unique([supplierId, productId])
}

model sync_configurations {
  id                  String    @id
  nodeId              String    @unique
  registrationKeyHash String?
  lastConfigUpdate    DateTime?
  configMetadata      Json?
  createdAt           DateTime  @default(now())
}

model sync_events {
  eventId         String        @id
  sourceNodeId    String
  tableName       String
  recordId        String
  operation       SyncOperation
  changeData      Json
  beforeData      Json?
  vectorClock     Json?
  lamportClock    String?
  checksum        String?
  priority        Int           @default(5)
  metadata        Json?
  processed       Boolean       @default(false)
  processedAt     DateTime?
  processingError String?
  retryCount      Int           @default(0)
  createdAt       DateTime      @default(now())
}

model sync_metrics {
  id                   String   @id
  nodeId               String
  metricDate           DateTime
  eventsGenerated      Int      @default(0)
  eventsReceived       Int      @default(0)
  eventsProcessed      Int      @default(0)
  eventsFailed         Int      @default(0)
  conflictsDetected    Int      @default(0)
  conflictsResolved    Int      @default(0)
  syncLatencyMs        Int?
  networkLatencyMs     Int?
  dataTransferredBytes BigInt?
  peersConnected       Int?     @default(0)
  peersDiscovered      Int?     @default(0)
  createdAt            DateTime @default(now())

  @@unique([nodeId, metricDate], map: "nodeId_metricDate")
}

model sync_nodes {
  id               String    @id
  nodeId           String    @unique
  nodeName         String
  ipAddress        String?
  port             Int?
  registrationKey  String?
  publicKey        String?
  isActive         Boolean   @default(true)
  lastSeen         DateTime  @default(now())
  nodeVersion      String?
  databaseVersion  String?
  schemaVersion    String?
  schemaHash       String?
  migrationName    String?
  schemaAppliedAt  DateTime?
  schemaCompatible Boolean   @default(true)
  platformInfo     Json?
  capabilities     Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
}

model sync_sessions {
  id           String    @id
  sessionId    String    @unique
  sourceNodeId String
  targetNodeId String?
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  endTime      DateTime?
  status       String    @default("PENDING")
  errorMessage String?
  metadata     Json?
  createdAt    DateTime  @default(now())
}

model users {
  id                                                              String                        @id
  email                                                           String                        @unique
  passwordHash                                                    String
  name                                                            String
  role                                                            String                        @default("user")
  permissions                                                     Json                          @default("{}")
  isActive                                                        Boolean                       @default(true)
  passwordResetRequired                                           Boolean                       @default(false)
  deactivatedAt                                                   DateTime?
  deactivatedBy                                                   String?
  deactivationReason                                              String?
  deactivationNotes                                               String?
  reactivatedAt                                                   DateTime?
  reactivatedBy                                                   String?
  reactivationNotes                                               String?
  createdAt                                                       DateTime                      @default(now())
  updatedAt                                                       DateTime                      @default(now())
  lastAccessedAt                                                  DateTime?
  lastAccessedBusinessId                                          String?
  lastAccessedBusinessType                                        String?
  username                                                        String?                       @unique
  accounts                                                        accounts[]
  audit_logs                                                      audit_logs[]
  business_accounts                                               business_accounts[]
  business_memberships                                            business_memberships[]
  business_transactions                                           business_transactions[]
  chat_messages                                                   chat_messages[]
  chat_participants                                               chat_participants[]
  chat_rooms                                                      chat_rooms[]
  construction_expenses                                           construction_expenses[]
  construction_projects                                           construction_projects[]
  driver_authorizations                                           driver_authorizations[]
  employees                                                       employees?
  expense_categories                                              expense_categories[]
  fund_sources                                                    fund_sources[]
  inter_business_loans_inter_business_loans_createdByTousers      inter_business_loans[]        @relation("inter_business_loans_createdByTousers")
  inter_business_loans_inter_business_loans_lenderUserIdTousers   inter_business_loans[]        @relation("inter_business_loans_lenderUserIdTousers")
  loan_transactions                                               loan_transactions[]
  orders                                                          orders[]
  payroll_adjustments_payroll_adjustments_approvedByTousers       payroll_adjustments[]         @relation("payroll_adjustments_approvedByTousers")
  payroll_adjustments_payroll_adjustments_createdByTousers        payroll_adjustments[]         @relation("payroll_adjustments_createdByTousers")
  payroll_entries                                                 payroll_entries[]
  payroll_exports                                                 payroll_exports[]
  payroll_periods_payroll_periods_approvedByTousers               payroll_periods[]             @relation("payroll_periods_approvedByTousers")
  payroll_periods_payroll_periods_createdByTousers                payroll_periods[]             @relation("payroll_periods_createdByTousers")
  permission_templates                                            permission_templates[]
  personal_budgets                                                personal_budgets[]
  personal_expenses                                               personal_expenses[]
  persons                                                         persons[]
  project_transactions_project_transactions_approvedByTousers     project_transactions[]        @relation("project_transactions_approvedByTousers")
  project_transactions_project_transactions_createdByTousers      project_transactions[]        @relation("project_transactions_createdByTousers")
  projects                                                        projects[]
  sessions                                                        sessions[]
  vehicle_drivers                                                 vehicle_drivers[]
  vehicle_expenses                                                vehicle_expenses[]
  vehicle_maintenance_records                                     vehicle_maintenance_records[]
  vehicle_reimbursements_vehicle_reimbursements_approvedByTousers vehicle_reimbursements[]      @relation("vehicle_reimbursements_approvedByTousers")
  vehicle_reimbursements_vehicle_reimbursements_userIdTousers     vehicle_reimbursements[]      @relation("vehicle_reimbursements_userIdTousers")
  vehicles                                                        vehicles[]
}

model vehicle_drivers {
  id                    String                  @id
  fullName              String
  licenseNumber         String                  @unique
  licenseExpiry         DateTime
  phoneNumber           String?
  emailAddress          String?
  emergencyContact      String?
  emergencyPhone        String?
  userId                String?
  isActive              Boolean                 @default(true)
  dateOfBirth           DateTime?
  address               String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  driver_authorizations driver_authorizations[]
  users                 users?                  @relation(fields: [userId], references: [id])
  vehicle_trips         vehicle_trips[]
}

model vehicle_expenses {
  id                   String         @id
  vehicleId            String
  tripId               String?
  businessId           String?
  expenseType          ExpenseType
  expenseCategory      String?
  amount               Decimal        @db.Decimal(10, 2)
  currency             String         @default("USD")
  expenseDate          DateTime
  isBusinessDeductible Boolean        @default(false)
  receiptUrl           String?
  vendorName           String?
  description          String?
  mileageAtExpense     Int?
  fuelQuantity         Decimal?       @db.Decimal(8, 2)
  fuelType             FuelType?
  createdBy            String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime
  businesses           businesses?    @relation(fields: [businessId], references: [id])
  users                users          @relation(fields: [createdBy], references: [id])
  vehicle_trips        vehicle_trips? @relation(fields: [tripId], references: [id])
  vehicles             vehicles       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model vehicle_licenses {
  id               String      @id
  vehicleId        String
  licenseType      LicenseType
  licenseNumber    String
  issuingAuthority String?
  issueDate        DateTime
  expiryDate       DateTime
  renewalCost      Decimal?    @db.Decimal(10, 2)
  isActive         Boolean     @default(true)
  documentUrl      String?
  reminderDays     Int         @default(30)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  vehicles         vehicles    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model vehicle_maintenance_records {
  id                           String                         @id
  vehicleId                    String
  serviceType                  ServiceType
  serviceCategory              String?
  serviceName                  String
  serviceDate                  DateTime
  mileageAtService             Int
  nextServiceDue               DateTime?
  nextServiceMileage           Int?
  serviceCost                  Decimal                        @db.Decimal(10, 2)
  serviceProvider              String?
  serviceLocation              String?
  partsReplaced                Json?
  warrantyInfo                 String?
  receiptUrl                   String?
  notes                        String?
  isScheduledService           Boolean                        @default(false)
  createdBy                    String
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime
  users                        users                          @relation(fields: [createdBy], references: [id])
  vehicles                     vehicles                       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicle_maintenance_services vehicle_maintenance_services[]
}

model vehicle_maintenance_service_expenses {
  id                           String                       @id
  serviceId                    String
  expenseType                  String
  amount                       Decimal                      @db.Decimal(10, 2)
  currency                     String                       @default("USD")
  description                  String?
  vendorName                   String?
  isBusinessDeductible         Boolean                      @default(false)
  receiptUrl                   String?
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  vehicle_maintenance_services vehicle_maintenance_services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model vehicle_maintenance_services {
  id                                   String                                 @id
  maintenanceRecordId                  String
  serviceName                          String
  serviceType                          String
  cost                                 Decimal                                @db.Decimal(10, 2)
  currency                             String                                 @default("USD")
  serviceProvider                      String?
  description                          String?
  isScheduledService                   Boolean                                @default(false)
  warrantyUntil                        String?
  receiptUrl                           String?
  createdAt                            DateTime                               @default(now())
  updatedAt                            DateTime
  vehicle_maintenance_service_expenses vehicle_maintenance_service_expenses[]
  vehicle_maintenance_records          vehicle_maintenance_records            @relation(fields: [maintenanceRecordId], references: [id], onDelete: Cascade)
}

model vehicle_reimbursements {
  id                                             String              @id
  userId                                         String
  vehicleId                                      String
  businessId                                     String
  reimbursementPeriod                            String
  totalMileage                                   Int
  businessMileage                                Int
  personalMileage                                Int
  statutoryRate                                  Decimal             @db.Decimal(8, 4)
  totalAmount                                    Decimal             @db.Decimal(10, 2)
  status                                         ReimbursementStatus @default(PENDING)
  submissionDate                                 DateTime
  approvalDate                                   DateTime?
  paymentDate                                    DateTime?
  approvedBy                                     String?
  notes                                          String?
  createdAt                                      DateTime            @default(now())
  updatedAt                                      DateTime
  users_vehicle_reimbursements_approvedByTousers users?              @relation("vehicle_reimbursements_approvedByTousers", fields: [approvedBy], references: [id])
  businesses                                     businesses          @relation(fields: [businessId], references: [id])
  users_vehicle_reimbursements_userIdTousers     users               @relation("vehicle_reimbursements_userIdTousers", fields: [userId], references: [id])
  vehicles                                       vehicles            @relation(fields: [vehicleId], references: [id])
}

model vehicle_trips {
  id                    String                @id
  vehicleId             String
  driverId              String
  businessId            String?
  startMileage          Int
  endMileage            Int?
  tripMileage           Int                   @default(0)
  tripPurpose           String
  tripType              TripType
  startLocation         String?
  endLocation           String?
  startTime             DateTime
  endTime               DateTime?
  isCompleted           Boolean               @default(false)
  notes                 String?
  gpsTrackingData       Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  vehicle_expenses      vehicle_expenses[]
  businesses            businesses?           @relation(fields: [businessId], references: [id])
  vehicle_drivers       vehicle_drivers       @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driver_authorizations driver_authorizations @relation(fields: [driverId, vehicleId], references: [driverId, vehicleId])
  vehicles              vehicles              @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model vehicles {
  id                          String                        @id
  licensePlate                String                        @unique
  vin                         String                        @unique
  make                        String
  model                       String
  year                        Int
  color                       String?
  weight                      Decimal?                      @db.Decimal(10, 2)
  driveType                   DriveType
  ownershipType               OwnershipType
  currentMileage              Int
  businessId                  String?
  userId                      String?
  isActive                    Boolean                       @default(true)
  purchaseDate                DateTime?
  purchasePrice               Decimal?                      @db.Decimal(12, 2)
  notes                       String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime
  hasInitialMileage           Boolean                       @default(false)
  mileageUnit                 String                        @default("km")
  driver_authorizations       driver_authorizations[]
  vehicle_expenses            vehicle_expenses[]
  vehicle_licenses            vehicle_licenses[]
  vehicle_maintenance_records vehicle_maintenance_records[]
  vehicle_reimbursements      vehicle_reimbursements[]
  vehicle_trips               vehicle_trips[]
  businesses                  businesses?                   @relation(fields: [businessId], references: [id])
  users                       users?                        @relation(fields: [userId], references: [id])
}

enum AttributeDataType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  LIST
  JSON
}

enum AuthorizationLevel {
  BASIC
  ADVANCED
  EMERGENCY
}

enum ConflictType {
  UPDATE_UPDATE
  UPDATE_DELETE
  DELETE_UPDATE
  VECTOR_CLOCK
  TIMESTAMP
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
  CONTRACTOR
  WHOLESALE
  VIP
}

enum DriveType {
  LEFT_HAND
  RIGHT_HAND
}

enum ExpenseType {
  FUEL
  TOLL
  PARKING
  MAINTENANCE
  INSURANCE
  OTHER
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum ImageSize {
  THUMBNAIL
  SMALL
  MEDIUM
  LARGE
  ORIGINAL
}

enum LicenseType {
  REGISTRATION
  RADIO
  ROAD_USE
  INSURANCE
  INSPECTION
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderType {
  SALE
  RETURN
  EXCHANGE
  SERVICE
  KITCHEN_TICKET
  RENTAL
  SUBSCRIPTION
}

enum OwnershipType {
  PERSONAL
  BUSINESS
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  STORE_CREDIT
  LAYAWAY
  NET_30
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  REFUNDED
  FAILED
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
  DAMAGED
  EXPIRED
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
  COMBO
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_ONE_GET_ONE
  COMBO_DEAL
  HAPPY_HOUR
  CATEGORY_DISCOUNT
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum ResolutionStrategy {
  LATEST_TIMESTAMP
  HIGHEST_PRIORITY
  MANUAL_RESOLUTION
  SOURCE_WINS
  TARGET_WINS
  MERGE_FIELDS
  LAST_WRITER_WINS
  NODE_PRIORITY
  MERGE_CHANGES
  BUSINESS_RULE
  KEEP_BOTH
}

enum ServiceType {
  OIL_CHANGE
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  INSPECTION
  REPAIR
  OTHER
}

enum StockMovementType {
  PURCHASE_RECEIVED
  SALE
  RETURN_IN
  RETURN_OUT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  DAMAGE
  THEFT
  EXPIRED
  PRODUCTION_IN
  PRODUCTION_OUT
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
  TRUNCATE
}

enum TripType {
  BUSINESS
  PERSONAL
  MIXED
}
