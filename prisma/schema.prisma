generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  users             Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model AuditLogs {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entityType String
  entityId   String
  timestamp  DateTime @default(now())
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  tableName  String?
  recordId   String?
  changes    Json?
  details    Json?
  users      Users    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model BenefitTypes {
  id                     String                 @id @default(uuid())
  name                   String                 @unique
  description            String?
  type                   String
  createdAt              DateTime               @default(now())
  defaultAmount          Decimal?               @db.Decimal(12, 2)
  isActive               Boolean                @default(true)
  isPercentage           Boolean                @default(false)
  updatedAt              DateTime               @default(now())
  contract_benefits      ContractBenefits[]
  employee_benefits      EmployeeBenefits[]
  payroll_entry_benefits PayrollEntryBenefits[]

  @@map("benefit_types")
}

model BusinessAccounts {
  id         String     @id @default(uuid())
  businessId String     @unique
  balance    Decimal    @default(0) @db.Decimal(12, 2)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  createdBy  String?
  businesses Businesses @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users      Users?     @relation(fields: [createdBy], references: [id])

  @@map("business_accounts")
}

model BusinessBrands {
  id                String             @id @default(uuid())
  businessId        String
  name              String
  description       String?
  logoUrl           String?
  website           String?
  isActive          Boolean            @default(true)
  businessType      String
  attributes        Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  businesses        Businesses         @relation(fields: [businessId], references: [id])
  business_products BusinessProducts[]

  @@unique([businessId, name])
  @@map("business_brands")
}

model BusinessCategories {
  id                        String                   @id @default(uuid())
  businessId                String
  name                      String
  description               String?
  parentId                  String?
  displayOrder              Int                      @default(0)
  isActive                  Boolean                  @default(true)
  businessType              String
  attributes                Json?
  emoji                     String                   @default("ðŸ“¦")
  color                     String                   @default("#3B82F6")
  domainId                  String?
  isUserCreated             Boolean                  @default(false)
  createdBy                 String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime
  businesses                Businesses               @relation(fields: [businessId], references: [id])
  business_categories       BusinessCategories?      @relation("business_categoriesTobusiness_categories", fields: [parentId], references: [id])
  other_business_categories BusinessCategories[]     @relation("business_categoriesTobusiness_categories")
  business_products         BusinessProducts[]
  domain                    InventoryDomains?        @relation(fields: [domainId], references: [id])
  users                     Users?                   @relation("CategoryCreatedBy", fields: [createdBy], references: [id])
  inventory_subcategories   InventorySubcategories[]

  @@unique([businessId, name])
  @@map("business_categories")
}

model BusinessCustomers {
  id              String           @id @default(uuid())
  businessId      String
  customerNumber  String
  name            String
  email           String?
  phone           String?
  dateOfBirth     DateTime?
  address         String?
  city            String?
  country         String?
  customerType    CustomerType     @default(INDIVIDUAL)
  segment         String?
  loyaltyPoints   Int              @default(0)
  totalSpent      Decimal          @default(0) @db.Decimal(12, 2)
  isActive        Boolean          @default(true)
  businessType    String
  attributes      Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  businesses      Businesses       @relation(fields: [businessId], references: [id])
  business_orders BusinessOrders[]
  customer_laybys CustomerLayby[]

  @@unique([businessId, customerNumber])
  @@map("business_customers")
}

model BusinessMemberships {
  id                   String               @id @default(uuid())
  userId               String
  businessId           String
  role                 String               @default("employee")
  permissions          Json                 @default("{}")
  isActive             Boolean              @default(true)
  invitedBy            String?
  joinedAt             DateTime             @default(now())
  lastAccessedAt       DateTime?
  templateId           String?
  businesses           Businesses           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  permission_templates PermissionTemplates? @relation(fields: [templateId], references: [id])
  users                Users                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("business_memberships")
}

model BusinessOrderItems {
  id               String          @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  unitPrice        Decimal         @db.Decimal(10, 2)
  discountAmount   Decimal         @default(0) @db.Decimal(10, 2)
  totalPrice       Decimal         @db.Decimal(10, 2)
  attributes       Json?
  createdAt        DateTime        @default(now())
  business_orders  BusinessOrders  @relation(fields: [orderId], references: [id])
  product_variants ProductVariants @relation(fields: [productVariantId], references: [id])

  @@map("business_order_items")
}

model BusinessOrders {
  id                   String               @id @default(uuid())
  businessId           String
  orderNumber          String
  customerId           String?
  employeeId           String?
  orderType            OrderType            @default(SALE)
  status               OrderStatus          @default(PENDING)
  subtotal             Decimal              @db.Decimal(10, 2)
  taxAmount            Decimal              @db.Decimal(10, 2)
  discountAmount       Decimal              @default(0) @db.Decimal(10, 2)
  totalAmount          Decimal              @db.Decimal(10, 2)
  paymentMethod        PaymentMethod?
  paymentStatus        PaymentStatus        @default(PENDING)
  businessType         String
  attributes           Json?
  notes                String?
  processedAt          DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  business_order_items BusinessOrderItems[]
  businesses           Businesses           @relation(fields: [businessId], references: [id])
  business_customers   BusinessCustomers?   @relation(fields: [customerId], references: [id])
  employees            Employees?           @relation(fields: [employeeId], references: [id])

  @@unique([businessId, orderNumber])
  @@map("business_orders")
}

model BusinessProducts {
  id                       String                   @id @default(uuid())
  businessId               String
  name                     String
  description              String?
  sku                      String?
  barcode                  String?
  brandId                  String?
  categoryId               String
  subcategoryId            String?
  supplierId               String?
  locationId               String?
  productType              ProductType              @default(PHYSICAL)
  condition                ProductCondition         @default(NEW)
  basePrice                Decimal                  @db.Decimal(10, 2)
  costPrice                Decimal?                 @db.Decimal(10, 2)
  isActive                 Boolean                  @default(true)
  businessType             String
  attributes               Json?
  isAvailable              Boolean                  @default(true)
  spiceLevel               Int?                     @default(0)
  dietaryRestrictions      String[]
  allergens                String[]
  preparationTime          Int?                     @default(0)
  calories                 Int?
  isCombo                  Boolean                  @default(false)
  comboItemsData           Json?
  originalPrice            Decimal?                 @db.Decimal(10, 2)
  discountPercent          Decimal?                 @db.Decimal(5, 2)
  discountAmount           Decimal?                 @db.Decimal(10, 2)
  promotionStartDate       DateTime?
  promotionEndDate         DateTime?
  promotionName            String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime
  business_brands          BusinessBrands?          @relation(fields: [brandId], references: [id])
  businesses               Businesses               @relation(fields: [businessId], references: [id])
  business_categories      BusinessCategories       @relation(fields: [categoryId], references: [id])
  inventory_subcategory    InventorySubcategories?  @relation(fields: [subcategoryId], references: [id])
  business_suppliers       BusinessSuppliers?       @relation("ProductSupplier", fields: [supplierId], references: [id])
  business_locations       BusinessLocations?       @relation("ProductLocation", fields: [locationId], references: [id])
  business_stock_movements BusinessStockMovements[]
  menu_combo_items         MenuComboItems[]
  product_attributes       ProductAttributes[]
  product_images           ProductImages[]
  product_variants         ProductVariants[]
  supplier_products        SupplierProducts[]

  @@unique([businessId, sku])
  @@map("business_products")
}

model BusinessStockMovements {
  id                String            @id @default(uuid())
  businessId        String
  productVariantId  String
  movementType      StockMovementType
  quantity          Int
  unitCost          Decimal?          @db.Decimal(10, 2)
  reference         String?
  reason            String?
  employeeId        String?
  businessType      String
  attributes        Json?
  createdAt         DateTime          @default(now())
  businessProductId String?
  businesses        Businesses        @relation(fields: [businessId], references: [id])
  business_products BusinessProducts? @relation(fields: [businessProductId], references: [id])
  employees         Employees?        @relation(fields: [employeeId], references: [id])
  product_variants  ProductVariants   @relation(fields: [productVariantId], references: [id])

  @@map("business_stock_movements")
}

model BusinessSuppliers {
  id                String             @id @default(uuid())
  businessId        String
  supplierNumber    String
  name              String
  contactPerson     String?
  email             String?
  phone             String?
  taxId             String?
  address           String?
  paymentTerms      String?
  creditLimit       Decimal?           @db.Decimal(12, 2)
  emoji             String?
  accountBalance    Decimal?           @default(0) @db.Decimal(12, 2)
  notes             String?
  isActive          Boolean            @default(true)
  businessType      String
  attributes        Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  businesses        Businesses         @relation(fields: [businessId], references: [id])
  supplier_products SupplierProducts[]
  business_products BusinessProducts[] @relation("ProductSupplier")

  @@unique([businessId, supplierNumber])
  @@map("business_suppliers")
}

model BusinessLocations {
  id                String              @id @default(uuid())
  businessId        String
  locationCode      String
  name              String
  emoji             String?
  description       String?
  locationType      String?
  capacity          Int?
  isActive          Boolean             @default(true)
  parentLocationId  String?
  attributes        Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  businesses        Businesses          @relation(fields: [businessId], references: [id])
  parent_location   BusinessLocations?  @relation("LocationHierarchy", fields: [parentLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child_locations   BusinessLocations[] @relation("LocationHierarchy")
  business_products BusinessProducts[]  @relation("ProductLocation")

  @@unique([businessId, locationCode])
  @@map("business_locations")
}

model BusinessTransactions {
  id            String     @id @default(uuid())
  businessId    String
  amount        Decimal    @db.Decimal(12, 2)
  type          String
  description   String
  referenceId   String?
  referenceType String?
  balanceAfter  Decimal    @db.Decimal(12, 2)
  createdAt     DateTime   @default(now())
  createdBy     String
  notes         String?
  metadata      Json?
  businesses    Businesses @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users         Users      @relation(fields: [createdBy], references: [id])

  @@map("business_transactions")
}

model Businesses {
  id                                                                       String                        @id @default(uuid())
  name                                                                     String
  type                                                                     String
  description                                                              String?
  isActive                                                                 Boolean                       @default(true)
  settings                                                                 Json                          @default("{}")
  createdBy                                                                String?
  createdAt                                                                DateTime                      @default(now())
  updatedAt                                                                DateTime                      @default(now())
  umbrellaBusinessId                                                       String?
  isUmbrellaBusiness                                                       Boolean                       @default(false)
  umbrellaBusinessName                                                     String?                       @default("Demo Umbrella Company")
  umbrellaBusinessAddress                                                  String?
  umbrellaBusinessEmail                                                    String?
  umbrellaBusinessPhone                                                    String?
  umbrellaBusinessRegistration                                             String?
  shortName                                                                String?
  business_accounts                                                        BusinessAccounts?
  business_brands                                                          BusinessBrands[]
  business_categories                                                      BusinessCategories[]
  business_customers                                                       BusinessCustomers[]
  business_memberships                                                     BusinessMemberships[]
  customer_laybys                                                          CustomerLayby[]
  business_orders                                                          BusinessOrders[]
  business_products                                                        BusinessProducts[]
  business_stock_movements                                                 BusinessStockMovements[]
  business_suppliers                                                       BusinessSuppliers[]
  business_locations                                                       BusinessLocations[]
  business_transactions                                                    BusinessTransactions[]
  businesses                                                               Businesses?                   @relation("businessesTobusinesses", fields: [umbrellaBusinessId], references: [id])
  other_businesses                                                         Businesses[]                  @relation("businessesTobusinesses")
  employee_business_assignments                                            EmployeeBusinessAssignments[]
  employee_contracts_employee_contracts_primaryBusinessIdTobusinesses      EmployeeContracts[]           @relation("employee_contracts_primaryBusinessIdTobusinesses")
  employee_contracts_employee_contracts_umbrellaBusinessIdTobusinesses     EmployeeContracts[]           @relation("employee_contracts_umbrellaBusinessIdTobusinesses")
  employees                                                                Employees[]
  inter_business_loans_inter_business_loans_borrowerBusinessIdTobusinesses InterBusinessLoans[]          @relation("inter_business_loans_borrowerBusinessIdTobusinesses")
  inter_business_loans_inter_business_loans_lenderBusinessIdTobusinesses   InterBusinessLoans[]          @relation("inter_business_loans_lenderBusinessIdTobusinesses")
  menu_combos                                                              MenuCombos[]
  menu_promotions                                                          MenuPromotions[]
  payroll_exports                                                          PayrollExports[]
  payroll_periods                                                          PayrollPeriods[]
  projects                                                                 Projects[]
  vehicle_expenses                                                         VehicleExpenses[]
  vehicle_reimbursements                                                   VehicleReimbursements[]
  vehicle_trips                                                            VehicleTrips[]
  vehicles                                                                 Vehicles[]

  @@map("businesses")
}

model ChatMessages {
  id         String     @id @default(uuid())
  message    String
  createdAt  DateTime   @default(now())
  roomId     String?
  userId     String?
  chat_rooms ChatRooms? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  users      Users?     @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model ChatParticipants {
  id         String     @id @default(uuid())
  joinedAt   DateTime   @default(now())
  roomId     String?
  userId     String?
  chat_rooms ChatRooms? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  users      Users?     @relation(fields: [userId], references: [id])

  @@map("chat_participants")
}

model ChatRooms {
  id                String             @id @default(uuid())
  name              String
  type              String             @default("group")
  createdAt         DateTime           @default(now())
  createdBy         String?
  chat_messages     ChatMessages[]
  chat_participants ChatParticipants[]
  users             Users?             @relation(fields: [createdBy], references: [id])

  @@map("chat_rooms")
}

model CompensationTypes {
  id                   String              @id @default(uuid())
  name                 String              @unique
  type                 String
  description          String?
  baseAmount           Decimal?            @db.Decimal(12, 2)
  commissionPercentage Decimal?            @db.Decimal(5, 2)
  createdAt            DateTime            @default(now())
  isActive             Boolean             @default(true)
  updatedAt            DateTime            @default(now())
  frequency            String?             @default("monthly")
  employee_contracts   EmployeeContracts[]
  employees            Employees[]

  @@map("compensation_types")
}

model ConflictResolutions {
  id                 String             @id @default(uuid())
  conflictType       ConflictType
  resolutionStrategy ResolutionStrategy
  sourceEventId      String
  targetEventId      String?
  resolvedData       Json
  resolvedBy         String?
  resolvedAt         DateTime           @default(now())
  eventIds           String[]           @default([])
  resolution         Json?
  strategy           String?
  metadata           Json?
  createdAt          DateTime           @default(now())

  @@map("conflict_resolutions")
}

model ConstructionExpenses {
  id                    String                @id @default(uuid())
  category              String
  description           String
  amount                Decimal               @db.Decimal(12, 2)
  vendor                String?
  createdAt             DateTime              @default(now())
  createdBy             String?
  projectId             String?
  receiptUrl            String?
  users                 Users?                @relation(fields: [createdBy], references: [id])
  construction_projects ConstructionProjects? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("construction_expenses")
}

model ConstructionProjects {
  id                    String                 @id @default(uuid())
  name                  String
  description           String?
  status                String                 @default("active")
  budget                Decimal?               @db.Decimal(12, 2)
  createdAt             DateTime               @default(now())
  createdBy             String?
  endDate               DateTime?
  startDate             DateTime?
  updatedAt             DateTime               @default(now())
  businessType          String                 @default("construction")
  projectTypeId         String?
  construction_expenses ConstructionExpenses[]
  users                 Users?                 @relation(fields: [createdBy], references: [id])
  project_types         ProjectTypes?          @relation(fields: [projectTypeId], references: [id])
  project_contractors   ProjectContractors[]
  project_stages        ProjectStages[]
  project_transactions  ProjectTransactions[]

  @@map("construction_projects")
}

model ContractBenefits {
  id                 String            @id @default(uuid())
  amount             Decimal           @db.Decimal(12, 2)
  notes              String?
  benefitTypeId      String
  contractId         String
  createdAt          DateTime          @default(now())
  isPercentage       Boolean           @default(false)
  benefit_types      BenefitTypes      @relation(fields: [benefitTypeId], references: [id])
  employee_contracts EmployeeContracts @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_benefits")
}

model ContractRenewals {
  id                                                                          String             @id @default(uuid())
  status                                                                      String             @default("pending")
  notes                                                                       String?
  autoRenewalMonths                                                           Int?
  benefitChanges                                                              Json?
  createdAt                                                                   DateTime           @default(now())
  employeeId                                                                  String
  isAutoRenewal                                                               Boolean            @default(false)
  jobTitleChange                                                              String?
  managerNotifiedAt                                                           DateTime?
  newContractId                                                               String?
  originalContractId                                                          String
  processedAt                                                                 DateTime?
  processedBy                                                                 String?
  reminderSentAt                                                              DateTime?
  renewalDueDate                                                              DateTime
  salaryChange                                                                Decimal?           @db.Decimal(12, 2)
  salaryChangeType                                                            String?
  updatedAt                                                                   DateTime           @default(now())
  employees                                                                   Employees          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employee_contracts_contract_renewals_newContractIdToemployee_contracts      EmployeeContracts? @relation("contract_renewals_newContractIdToemployee_contracts", fields: [newContractId], references: [id])
  employee_contracts_contract_renewals_originalContractIdToemployee_contracts EmployeeContracts  @relation("contract_renewals_originalContractIdToemployee_contracts", fields: [originalContractId], references: [id])

  @@map("contract_renewals")
}

model CustomerLayby {
  id          String  @id @default(cuid())
  laybyNumber String  @unique
  businessId  String
  customerId  String?

  // Status & Financial
  status           LaybyStatus @default(ACTIVE)
  totalAmount      Decimal     @db.Decimal(12, 2)
  depositAmount    Decimal     @db.Decimal(12, 2)
  depositPercent   Decimal     @db.Decimal(5, 2)
  balanceRemaining Decimal     @db.Decimal(12, 2)
  totalPaid        Decimal     @default(0) @db.Decimal(12, 2)

  // Terms & Schedule
  installmentAmount    Decimal?              @db.Decimal(12, 2)
  installmentFrequency InstallmentFrequency?
  paymentDueDate       DateTime?
  completionDueDate    DateTime?

  // Fees & Charges
  serviceFee        Decimal @default(0) @db.Decimal(12, 2)
  lateFee           Decimal @default(0) @db.Decimal(12, 2)
  administrationFee Decimal @default(0) @db.Decimal(12, 2)
  totalFees         Decimal @default(0) @db.Decimal(12, 2)

  // Items & Release
  items           Json
  itemsReleased   Boolean   @default(false)
  itemsReleasedAt DateTime?
  itemsReleasedBy String?

  // Metadata
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          String
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  cancellationRefund Decimal?  @db.Decimal(12, 2)

  // Relations
  business Businesses             @relation(fields: [businessId], references: [id])
  customer BusinessCustomers?     @relation(fields: [customerId], references: [id])
  creator  Users                  @relation("CustomerLaybyCreator", fields: [createdBy], references: [id])
  payments CustomerLaybyPayment[]

  @@index([businessId])
  @@index([customerId])
  @@index([status])
  @@map("customer_laybys")
}

model CustomerLaybyPayment {
  id            String @id @default(cuid())
  laybyId       String
  receiptNumber String @unique

  // Payment Details
  amount           Decimal       @db.Decimal(12, 2)
  paymentMethod    PaymentMethod
  paymentReference String?

  // Metadata
  paymentDate       DateTime @default(now())
  processedBy       String
  notes             String?
  isRefund          Boolean  @default(false)
  refundedPaymentId String?

  // Relations
  layby           CustomerLayby          @relation(fields: [laybyId], references: [id], onDelete: Cascade)
  processor       Users                  @relation("CustomerLaybyPaymentProcessor", fields: [processedBy], references: [id])
  refundedPayment CustomerLaybyPayment?  @relation("RefundRelation", fields: [refundedPaymentId], references: [id])
  refunds         CustomerLaybyPayment[] @relation("RefundRelation")

  @@index([laybyId])
  @@map("customer_layby_payments")
}

model DataSnapshots {
  id                  String   @id @default(uuid())
  nodeId              String
  tableName           String
  recordId            String
  snapshotData        Json
  advanceBreakdown    Json?
  advanceDeductions   Decimal  @default(0) @db.Decimal(12, 2)
  deductionsBreakdown Json?
  expectedWorkDays    Int?
  hasAdjustments      Boolean?
  isProRata           Boolean?
  loanBreakdown       Json?
  loanDeductions      Decimal  @default(0) @db.Decimal(12, 2)
  proRataCalculation  Json?
  proRataReason       String?
  processedBy         String?
  totalDeductions     Decimal  @default(0) @db.Decimal(12, 2)

  @@map("data_snapshots")
}

model DisciplinaryActions {
  id                                                   String    @id @default(uuid())
  employeeId                                           String
  actionType                                           String
  violationType                                        String
  title                                                String
  description                                          String
  incidentDate                                         DateTime
  actionDate                                           DateTime
  severity                                             String    @default("low")
  isActive                                             Boolean   @default(true)
  improvementPlan                                      String?
  followUpDate                                         DateTime?
  followUpNotes                                        String?
  createdBy                                            String
  hrReviewed                                           Boolean   @default(false)
  hrReviewedBy                                         String?
  hrReviewedAt                                         DateTime?
  hrNotes                                              String?
  employeeAcknowledged                                 Boolean   @default(false)
  employeeResponse                                     String?
  employeeSignedAt                                     DateTime?
  attachments                                          String[]
  createdAt                                            DateTime  @default(now())
  updatedAt                                            DateTime  @default(now())
  employees_disciplinary_actions_createdByToemployees  Employees @relation("disciplinary_actions_createdByToemployees", fields: [createdBy], references: [id], map: "disciplinary_actions_created_by_fkey")
  employees_disciplinary_actions_employeeIdToemployees Employees @relation("disciplinary_actions_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade, map: "disciplinary_actions_employee_id_fkey")

  @@map("disciplinary_actions")
}

model DriverAuthorizations {
  id                 String             @id @default(uuid())
  driverId           String
  vehicleId          String
  authorizedBy       String
  authorizedDate     DateTime
  expiryDate         DateTime?
  isActive           Boolean            @default(true)
  authorizationLevel AuthorizationLevel @default(BASIC)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  users              Users              @relation(fields: [authorizedBy], references: [id])
  vehicle_drivers    VehicleDrivers     @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicles           Vehicles           @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicle_trips      VehicleTrips[]

  @@unique([driverId, vehicleId])
  @@map("driver_authorizations")
}

model DriverLicenseTemplates {
  id          String      @id @default(uuid())
  name        String
  description String?
  pattern     String
  example     String
  countryCode String?
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)
  updatedAt   DateTime    @default(now())
  employees   Employees[]
  persons     Persons[]

  @@map("driver_license_templates")
}

model EmployeeAllowances {
  id                                                  String     @id @default(uuid())
  employeeId                                          String
  type                                                String
  amount                                              Decimal    @db.Decimal(12, 2)
  description                                         String?
  payrollMonth                                        Int
  payrollYear                                         Int
  approvedBy                                          String?
  approvedAt                                          DateTime?
  createdAt                                           DateTime   @default(now())
  employees_employee_allowances_approvedByToemployees Employees? @relation("employee_allowances_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_allowances_employeeIdToemployees Employees  @relation("employee_allowances_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_allowances")
}

model EmployeeAttendance {
  id          String    @id @default(uuid())
  date        DateTime
  status      String    @default("present")
  notes       String?
  checkIn     DateTime?
  checkOut    DateTime?
  createdAt   DateTime  @default(now())
  employeeId  String
  hoursWorked Decimal?  @db.Decimal(4, 2)
  employees   Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("employee_attendance")
}

model EmployeeBenefits {
  id            String       @id @default(uuid())
  amount        Decimal      @db.Decimal(12, 2)
  notes         String?
  benefitTypeId String
  createdAt     DateTime     @default(now())
  effectiveDate DateTime
  employeeId    String
  endDate       DateTime?
  isActive      Boolean      @default(true)
  isPercentage  Boolean      @default(false)
  updatedAt     DateTime     @default(now())
  benefit_types BenefitTypes @relation(fields: [benefitTypeId], references: [id])
  employees     Employees    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_benefits")
}

model EmployeeBonuses {
  id                                               String     @id @default(uuid())
  amount                                           Decimal    @db.Decimal(12, 2)
  approvedAt                                       DateTime?
  approvedBy                                       String?
  createdAt                                        DateTime   @default(now())
  employeeId                                       String
  reason                                           String?
  type                                             String
  employees_employee_bonuses_approvedByToemployees Employees? @relation("employee_bonuses_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_bonuses_employeeIdToemployees Employees  @relation("employee_bonuses_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_bonuses")
}

model EmployeeBusinessAssignments {
  id         String     @id @default(uuid())
  role       String?
  notes      String?
  assignedBy String?
  businessId String
  createdAt  DateTime   @default(now())
  employeeId String
  endDate    DateTime?
  isActive   Boolean    @default(true)
  isPrimary  Boolean    @default(false)
  startDate  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  businesses Businesses @relation(fields: [businessId], references: [id])
  employees  Employees  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, businessId])
  @@map("employee_business_assignments")
}

model EmployeeContracts {
  id                                                                         String              @id @default(uuid())
  version                                                                    Int                 @default(1)
  status                                                                     String              @default("draft")
  notes                                                                      String?
  additionalBusinesses                                                       String[]
  approvedAt                                                                 DateTime?
  approvedBy                                                                 String?
  baseSalary                                                                 Decimal             @db.Decimal(12, 2)
  compensationTypeId                                                         String
  contractNumber                                                             String              @unique
  createdAt                                                                  DateTime            @default(now())
  createdBy                                                                  String?
  customResponsibilities                                                     String?
  employeeId                                                                 String
  employeeSignedAt                                                           DateTime?
  endDate                                                                    DateTime?
  isCommissionBased                                                          Boolean             @default(false)
  isSalaryBased                                                              Boolean             @default(true)
  jobTitleId                                                                 String
  managerSignedAt                                                            DateTime?
  pdfUrl                                                                     String?
  primaryBusinessId                                                          String
  probationPeriodMonths                                                      Int?
  signedPdfUrl                                                               String?
  startDate                                                                  DateTime
  supervisorId                                                               String?
  supervisorName                                                             String?
  supervisorTitle                                                            String?
  updatedAt                                                                  DateTime            @default(now())
  commissionAmount                                                           Decimal?            @db.Decimal(12, 2)
  contractDurationMonths                                                     Int?
  livingAllowance                                                            Decimal?            @db.Decimal(12, 2)
  pdfGenerationData                                                          Json?
  umbrellaBusinessId                                                         String?
  umbrellaBusinessName                                                       String?             @default("Demo Umbrella Company")
  businessAssignments                                                        Json?
  previousContractId                                                         String?
  copiedFromContractId                                                       String?
  isRenewal                                                                  Boolean             @default(false)
  originalContractId                                                         String?
  renewalCount                                                               Int                 @default(0)
  contract_benefits                                                          ContractBenefits[]
  contract_renewals_contract_renewals_newContractIdToemployee_contracts      ContractRenewals[]  @relation("contract_renewals_newContractIdToemployee_contracts")
  contract_renewals_contract_renewals_originalContractIdToemployee_contracts ContractRenewals[]  @relation("contract_renewals_originalContractIdToemployee_contracts")
  compensation_types                                                         CompensationTypes   @relation(fields: [compensationTypeId], references: [id])
  employees_employee_contracts_employeeIdToemployees                         Employees           @relation("employee_contracts_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)
  job_titles                                                                 JobTitles           @relation(fields: [jobTitleId], references: [id])
  employee_contracts                                                         EmployeeContracts?  @relation("employee_contractsToemployee_contracts", fields: [previousContractId], references: [id])
  other_employee_contracts                                                   EmployeeContracts[] @relation("employee_contractsToemployee_contracts")
  businesses_employee_contracts_primaryBusinessIdTobusinesses                Businesses          @relation("employee_contracts_primaryBusinessIdTobusinesses", fields: [primaryBusinessId], references: [id])
  employees_employee_contracts_supervisorIdToemployees                       Employees?          @relation("employee_contracts_supervisorIdToemployees", fields: [supervisorId], references: [id])
  businesses_employee_contracts_umbrellaBusinessIdTobusinesses               Businesses?         @relation("employee_contracts_umbrellaBusinessIdTobusinesses", fields: [umbrellaBusinessId], references: [id])

  @@map("employee_contracts")
}

model EmployeeDeductionPayments {
  id                  String             @id @default(uuid())
  amount              Decimal            @db.Decimal(12, 2)
  createdAt           DateTime           @default(now())
  deductionId         String
  paymentDate         DateTime
  processedBy         String?
  employee_deductions EmployeeDeductions @relation(fields: [deductionId], references: [id], onDelete: Cascade)
  employees           Employees?         @relation(fields: [processedBy], references: [id])

  @@map("employee_deduction_payments")
}

model EmployeeDeductions {
  id                                                  String                      @id @default(uuid())
  amount                                              Decimal                     @db.Decimal(12, 2)
  approvedAt                                          DateTime?
  approvedBy                                          String?
  createdAt                                           DateTime                    @default(now())
  employeeId                                          String
  reason                                              String?
  type                                                String
  employee_deduction_payments                         EmployeeDeductionPayments[]
  employees_employee_deductions_approvedByToemployees Employees?                  @relation("employee_deductions_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_deductions_employeeIdToemployees Employees                   @relation("employee_deductions_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_deductions")
}

model EmployeeLeaveBalance {
  id              String    @id @default(uuid())
  year            Int
  annualLeaveDays Int       @default(0)
  createdAt       DateTime  @default(now())
  employeeId      String
  remainingAnnual Int       @default(0)
  remainingSick   Int       @default(0)
  sickLeaveDays   Int       @default(0)
  updatedAt       DateTime
  usedAnnualDays  Int       @default(0)
  usedSickDays    Int       @default(0)
  employees       Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, year])
  @@map("employee_leave_balance")
}

model EmployeeLeaveRequests {
  id                                                      String     @id @default(uuid())
  reason                                                  String?
  status                                                  String     @default("pending")
  approvedAt                                              DateTime?
  approvedBy                                              String?
  createdAt                                               DateTime   @default(now())
  daysRequested                                           Int
  employeeId                                              String
  endDate                                                 DateTime
  leaveType                                               String
  rejectionReason                                         String?
  startDate                                               DateTime
  updatedAt                                               DateTime
  employees_employee_leave_requests_approvedByToemployees Employees? @relation("employee_leave_requests_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_leave_requests_employeeIdToemployees Employees  @relation("employee_leave_requests_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_leave_requests")
}

model EmployeeLoanPayments {
  id             String        @id @default(uuid())
  amount         Decimal       @db.Decimal(12, 2)
  createdAt      DateTime      @default(now())
  loanId         String
  paymentDate    DateTime
  processedBy    String?
  employee_loans EmployeeLoans @relation(fields: [loanId], references: [id], onDelete: Cascade)
  employees      Employees?    @relation(fields: [processedBy], references: [id])

  @@map("employee_loan_payments")
}

model EmployeeLoans {
  id                                             String                 @id @default(uuid())
  status                                         String                 @default("active")
  approvedAt                                     DateTime?
  approvedBy                                     String?
  createdAt                                      DateTime               @default(now())
  employeeId                                     String
  loanAmount                                     Decimal                @db.Decimal(12, 2)
  monthlyDeduction                               Decimal                @db.Decimal(12, 2)
  remainingBalance                               Decimal                @db.Decimal(12, 2)
  remainingMonths                                Int
  totalMonths                                    Int
  updatedAt                                      DateTime
  employee_loan_payments                         EmployeeLoanPayments[]
  employees_employee_loans_approvedByToemployees Employees?             @relation("employee_loans_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_loans_employeeIdToemployees Employees              @relation("employee_loans_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_loans")
}

model EmployeeSalaryIncreases {
  id                                                        String     @id @default(uuid())
  reason                                                    String?
  approvedAt                                                DateTime?
  approvedBy                                                String?
  createdAt                                                 DateTime   @default(now())
  effectiveDate                                             DateTime
  employeeId                                                String
  increaseAmount                                            Decimal    @db.Decimal(12, 2)
  increasePercent                                           Decimal    @db.Decimal(5, 2)
  newSalary                                                 Decimal    @db.Decimal(12, 2)
  previousSalary                                            Decimal    @db.Decimal(12, 2)
  employees_employee_salary_increases_approvedByToemployees Employees? @relation("employee_salary_increases_approvedByToemployees", fields: [approvedBy], references: [id])
  employees_employee_salary_increases_employeeIdToemployees Employees  @relation("employee_salary_increases_employeeIdToemployees", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_salary_increases")
}

model EmployeeTimeTracking {
  id            String    @id @default(uuid())
  employeeId    String
  year          Int
  month         Int
  workDays      Int       @default(0)
  totalHours    Decimal?  @db.Decimal(5, 2)
  overtimeHours Decimal?  @db.Decimal(5, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  employees     Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, year, month])
  @@map("employee_time_tracking")
}

model Employees {
  id                                                                        String                        @id @default(uuid())
  email                                                                     String?                       @unique
  phone                                                                     String
  address                                                                   String?
  employmentStatus                                                          String                        @default("active")
  notes                                                                     String?
  compensationTypeId                                                        String
  createdAt                                                                 DateTime                      @default(now())
  createdBy                                                                 String?
  customResponsibilities                                                    String?
  dateOfBirth                                                               DateTime?
  employeeNumber                                                            String                        @unique
  firstName                                                                 String
  fullName                                                                  String
  hireDate                                                                  DateTime
  idFormatTemplateId                                                        String?
  isActive                                                                  Boolean                       @default(true)
  jobTitleId                                                                String
  lastName                                                                  String
  nationalId                                                                String                        @unique
  primaryBusinessId                                                         String
  profilePhotoUrl                                                           String?
  startDate                                                                 DateTime?
  supervisorId                                                              String?
  terminationDate                                                           DateTime?
  updatedAt                                                                 DateTime                      @default(now())
  userId                                                                    String?                       @unique
  driverLicenseNumber                                                       String?
  driverLicenseTemplateId                                                   String?
  business_orders                                                           BusinessOrders[]
  business_stock_movements                                                  BusinessStockMovements[]
  contract_renewals                                                         ContractRenewals[]
  disciplinary_actions_disciplinary_actions_createdByToemployees            DisciplinaryActions[]         @relation("disciplinary_actions_createdByToemployees")
  disciplinary_actions_disciplinary_actions_employeeIdToemployees           DisciplinaryActions[]         @relation("disciplinary_actions_employeeIdToemployees")
  employee_allowances_employee_allowances_approvedByToemployees             EmployeeAllowances[]          @relation("employee_allowances_approvedByToemployees")
  employee_allowances_employee_allowances_employeeIdToemployees             EmployeeAllowances[]          @relation("employee_allowances_employeeIdToemployees")
  employee_attendance                                                       EmployeeAttendance[]
  employee_benefits                                                         EmployeeBenefits[]
  employee_bonuses_employee_bonuses_approvedByToemployees                   EmployeeBonuses[]             @relation("employee_bonuses_approvedByToemployees")
  employee_bonuses_employee_bonuses_employeeIdToemployees                   EmployeeBonuses[]             @relation("employee_bonuses_employeeIdToemployees")
  employee_business_assignments                                             EmployeeBusinessAssignments[]
  employee_contracts_employee_contracts_employeeIdToemployees               EmployeeContracts[]           @relation("employee_contracts_employeeIdToemployees")
  employee_contracts_employee_contracts_supervisorIdToemployees             EmployeeContracts[]           @relation("employee_contracts_supervisorIdToemployees")
  employee_deduction_payments                                               EmployeeDeductionPayments[]
  employee_deductions_employee_deductions_approvedByToemployees             EmployeeDeductions[]          @relation("employee_deductions_approvedByToemployees")
  employee_deductions_employee_deductions_employeeIdToemployees             EmployeeDeductions[]          @relation("employee_deductions_employeeIdToemployees")
  employee_leave_balance                                                    EmployeeLeaveBalance[]
  employee_leave_requests_employee_leave_requests_approvedByToemployees     EmployeeLeaveRequests[]       @relation("employee_leave_requests_approvedByToemployees")
  employee_leave_requests_employee_leave_requests_employeeIdToemployees     EmployeeLeaveRequests[]       @relation("employee_leave_requests_employeeIdToemployees")
  employee_loan_payments                                                    EmployeeLoanPayments[]
  employee_loans_employee_loans_approvedByToemployees                       EmployeeLoans[]               @relation("employee_loans_approvedByToemployees")
  employee_loans_employee_loans_employeeIdToemployees                       EmployeeLoans[]               @relation("employee_loans_employeeIdToemployees")
  employee_salary_increases_employee_salary_increases_approvedByToemployees EmployeeSalaryIncreases[]     @relation("employee_salary_increases_approvedByToemployees")
  employee_salary_increases_employee_salary_increases_employeeIdToemployees EmployeeSalaryIncreases[]     @relation("employee_salary_increases_employeeIdToemployees")
  employee_time_tracking                                                    EmployeeTimeTracking[]
  compensation_types                                                        CompensationTypes             @relation(fields: [compensationTypeId], references: [id])
  driver_license_templates                                                  DriverLicenseTemplates?       @relation(fields: [driverLicenseTemplateId], references: [id])
  id_format_templates                                                       IdFormatTemplates?            @relation(fields: [idFormatTemplateId], references: [id])
  job_titles                                                                JobTitles                     @relation(fields: [jobTitleId], references: [id])
  businesses                                                                Businesses                    @relation(fields: [primaryBusinessId], references: [id])
  employees                                                                 Employees?                    @relation("employeesToemployees", fields: [supervisorId], references: [id])
  other_employees                                                           Employees[]                   @relation("employeesToemployees")
  users                                                                     Users?                        @relation(fields: [userId], references: [id])
  payroll_entries                                                           PayrollEntries[]

  @@map("employees")
}

model ExpenseDomains {
  id                 String              @id @default(uuid())
  name               String              @unique
  emoji              String
  description        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  expense_categories ExpenseCategories[]

  @@map("expense_domains")
}

model ExpenseCategories {
  id                    String                 @id @default(uuid())
  domainId              String?
  name                  String
  emoji                 String                 @default("ðŸ’°")
  color                 String                 @default("#3B82F6")
  description           String?
  isDefault             Boolean                @default(false)
  isUserCreated         Boolean                @default(false)
  createdAt             DateTime               @default(now())
  createdBy             String?
  domain                ExpenseDomains?        @relation(fields: [domainId], references: [id])
  users                 Users?                 @relation(fields: [createdBy], references: [id])
  expense_subcategories ExpenseSubcategories[]
  personal_expenses     PersonalExpenses[]

  @@unique([domainId, name])
  @@map("expense_categories")
}

model ExpenseSubcategories {
  id                String             @id @default(uuid())
  categoryId        String
  name              String
  emoji             String?
  description       String?
  isDefault         Boolean            @default(false)
  isUserCreated     Boolean            @default(false)
  createdAt         DateTime           @default(now())
  createdBy         String?
  category          ExpenseCategories  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  users             Users?             @relation(fields: [createdBy], references: [id])
  personal_expenses PersonalExpenses[]

  @@unique([categoryId, name])
  @@map("expense_subcategories")
}

model EmojiLookup {
  id          String   @id @default(uuid())
  emoji       String
  description String
  name        String?
  url         String?
  source      String
  fetchedAt   DateTime @default(now())
  usageCount  Int      @default(0)

  @@unique([emoji, description])
  @@index([description])
  @@map("emoji_lookup")
}

model InventoryDomains {
  id                  String               @id @default(uuid())
  name                String               @unique
  emoji               String
  description         String?
  businessType        String
  isActive            Boolean              @default(true)
  isSystemTemplate    Boolean              @default(false)
  createdAt           DateTime             @default(now())
  business_categories BusinessCategories[]

  @@map("inventory_domains")
}

model InventorySubcategories {
  id                String             @id @default(uuid())
  categoryId        String
  name              String
  emoji             String?
  description       String?
  isDefault         Boolean            @default(false)
  isUserCreated     Boolean            @default(false)
  displayOrder      Int                @default(0)
  createdAt         DateTime           @default(now())
  createdBy         String?
  category          BusinessCategories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  users             Users?             @relation("SubcategoryCreatedBy", fields: [createdBy], references: [id])
  business_products BusinessProducts[]

  @@unique([categoryId, name])
  @@map("inventory_subcategories")
}

model FundSources {
  id         String   @id @default(uuid())
  name       String
  emoji      String?  @default("ðŸ’°")
  createdAt  DateTime @default(now())
  isDefault  Boolean  @default(false)
  usageCount Int      @default(0)
  userId     String?
  users      Users?   @relation(fields: [userId], references: [id])

  @@map("fund_sources")
}

model IdFormatTemplates {
  id          String      @id @default(uuid())
  name        String
  description String?
  pattern     String
  example     String
  countryCode String?
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)
  updatedAt   DateTime    @default(now())
  employees   Employees[]
  persons     Persons[]

  @@map("id_format_templates")
}

model InitialLoadSessions {
  id               String    @id @default(uuid())
  sessionId        String    @unique
  sourceNodeId     String
  targetNodeId     String
  tableName        String
  totalRecords     Int       @default(0)
  processedRecords Int       @default(0)
  status           String    @default("PENDING")
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  errorMessage     String?
  batchSize        Int       @default(1000)
  currentBatch     Int       @default(0)
  metadata         Json?
  createdAt        DateTime  @default(now())

  @@map("initial_load_sessions")
}

model InterBusinessLoans {
  id                                                             String             @id @default(uuid())
  loanNumber                                                     String             @unique
  principalAmount                                                Decimal            @db.Decimal(12, 2)
  interestRate                                                   Decimal            @default(0) @db.Decimal(5, 2)
  totalAmount                                                    Decimal            @db.Decimal(12, 2)
  remainingBalance                                               Decimal            @db.Decimal(12, 2)
  lenderType                                                     String
  lenderUserId                                                   String?
  lenderBusinessId                                               String?
  borrowerBusinessId                                             String?
  loanDate                                                       DateTime
  dueDate                                                        DateTime?
  status                                                         String             @default("active")
  terms                                                          String?
  notes                                                          String?
  createdAt                                                      DateTime           @default(now())
  updatedAt                                                      DateTime
  createdBy                                                      String
  borrowerPersonId                                               String?
  borrowerType                                                   String
  businesses_inter_business_loans_borrowerBusinessIdTobusinesses Businesses?        @relation("inter_business_loans_borrowerBusinessIdTobusinesses", fields: [borrowerBusinessId], references: [id])
  persons                                                        Persons?           @relation(fields: [borrowerPersonId], references: [id])
  users_inter_business_loans_createdByTousers                    Users              @relation("inter_business_loans_createdByTousers", fields: [createdBy], references: [id])
  businesses_inter_business_loans_lenderBusinessIdTobusinesses   Businesses?        @relation("inter_business_loans_lenderBusinessIdTobusinesses", fields: [lenderBusinessId], references: [id])
  users_inter_business_loans_lenderUserIdTousers                 Users?             @relation("inter_business_loans_lenderUserIdTousers", fields: [lenderUserId], references: [id])
  loan_transactions                                              LoanTransactions[]

  @@map("inter_business_loans")
}

model JobTitles {
  id                 String              @id @default(uuid())
  title              String              @unique
  description        String?
  responsibilities   String[]
  department         String?
  level              String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  employee_contracts EmployeeContracts[]
  employees          Employees[]

  @@map("job_titles")
}

model LoanTransactions {
  id                    String             @id @default(uuid())
  loanId                String
  transactionType       String
  amount                Decimal            @db.Decimal(12, 2)
  description           String?
  transactionDate       DateTime
  personalExpenseId     String?
  businessTransactionId String?
  isAutoGenerated       Boolean            @default(false)
  autoGeneratedNote     String?
  initiatedFrom         String?
  balanceAfter          Decimal            @db.Decimal(12, 2)
  createdAt             DateTime           @default(now())
  createdBy             String
  users                 Users              @relation(fields: [createdBy], references: [id])
  inter_business_loans  InterBusinessLoans @relation(fields: [loanId], references: [id], onDelete: Cascade)
  personal_expenses     PersonalExpenses?  @relation(fields: [personalExpenseId], references: [id])

  @@map("loan_transactions")
}

model MenuComboItems {
  id                String           @id @default(uuid())
  comboId           String
  productId         String
  variantId         String?
  quantity          Int              @default(1)
  isRequired        Boolean          @default(true)
  sortOrder         Int              @default(0)
  createdAt         DateTime         @default(now())
  menu_combos       MenuCombos       @relation(fields: [comboId], references: [id], onDelete: Cascade)
  business_products BusinessProducts @relation(fields: [productId], references: [id], onDelete: Cascade)
  product_variants  ProductVariants? @relation(fields: [variantId], references: [id])

  @@map("menu_combo_items")
}

model MenuCombos {
  id                 String           @id @default(uuid())
  businessId         String
  name               String
  description        String?
  totalPrice         Decimal          @db.Decimal(10, 2)
  originalTotalPrice Decimal?         @db.Decimal(10, 2)
  isActive           Boolean          @default(true)
  isAvailable        Boolean          @default(true)
  imageUrl           String?
  preparationTime    Int              @default(0)
  discountPercent    Decimal?         @db.Decimal(5, 2)
  promotionStartDate DateTime?
  promotionEndDate   DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  menu_combo_items   MenuComboItems[]
  businesses         Businesses       @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("menu_combos")
}

model MenuItems {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Decimal      @db.Decimal(10, 2)
  category    String
  barcode     String?
  createdAt   DateTime     @default(now())
  isAvailable Boolean      @default(true)
  updatedAt   DateTime     @default(now())
  order_items OrderItems[]

  @@map("menu_items")
}

model MenuPromotions {
  id                   String        @id @default(uuid())
  businessId           String
  name                 String
  description          String?
  type                 PromotionType
  value                Decimal       @db.Decimal(10, 2)
  minOrderAmount       Decimal?      @db.Decimal(10, 2)
  maxDiscountAmount    Decimal?      @db.Decimal(10, 2)
  startDate            DateTime
  endDate              DateTime?
  startTime            String?
  endTime              String?
  daysOfWeek           String[]
  isActive             Boolean       @default(true)
  usageLimit           Int?
  usageCount           Int           @default(0)
  applicableCategories String[]
  applicableProducts   String[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  businesses           Businesses    @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("menu_promotions")
}

model NetworkPartitions {
  id                 String    @id @default(uuid())
  nodeId             String
  partitionType      String
  startTime          DateTime
  detectedAt         DateTime
  isResolved         Boolean   @default(false)
  endTime            DateTime?
  partitionMetadata  Json?
  resolutionMetadata Json?
  createdAt          DateTime  @default(now())

  @@map("network_partitions")
}

model NodeStates {
  id          String   @id @default(uuid())
  nodeId      String   @unique
  nodeName    String
  lastSeen    DateTime @default(now())
  isOnline    Boolean  @default(false)
  syncVersion String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@map("node_states")
}

model OfflineQueue {
  id           String    @id @default(uuid())
  nodeId       String
  eventId      String
  tableName    String
  recordId     String
  operation    String
  changeData   Json
  beforeData   Json?
  queuedAt     DateTime  @default(now())
  priority     Int       @default(5)
  retryCount   Int       @default(0)
  lastAttempt  DateTime?
  errorMessage String?
  dependencies Json?
  isProcessed  Boolean   @default(false)

  @@map("offline_queue")
}

model OrderItems {
  id         String     @id @default(uuid())
  quantity   Int
  price      Decimal    @db.Decimal(10, 2)
  notes      String?
  menuItemId String?
  orderId    String?
  menu_items MenuItems? @relation(fields: [menuItemId], references: [id])
  orders     Orders?    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Orders {
  id          String       @id @default(uuid())
  total       Decimal      @db.Decimal(10, 2)
  status      String       @default("pending")
  createdAt   DateTime     @default(now())
  createdBy   String?
  orderNumber String       @unique
  tableNumber String?
  order_items OrderItems[]
  users       Users?       @relation(fields: [createdBy], references: [id])

  @@map("orders")
}

model PayrollAdjustments {
  id                                          String          @id @default(uuid())
  payrollEntryId                              String?
  amount                                      Decimal         @db.Decimal(12, 2)
  reason                                      String?
  createdAt                                   DateTime        @default(now())
  createdBy                                   String?
  adjustmentType                              String?
  approvedAt                                  DateTime?
  approvedBy                                  String?
  status                                      String          @default("pending")
  updatedAt                                   DateTime        @default(now())
  users_payroll_adjustments_approvedByTousers Users?          @relation("payroll_adjustments_approvedByTousers", fields: [approvedBy], references: [id])
  users_payroll_adjustments_createdByTousers  Users?          @relation("payroll_adjustments_createdByTousers", fields: [createdBy], references: [id])
  payroll_entries                             PayrollEntries? @relation(fields: [payrollEntryId], references: [id], onDelete: Cascade)

  @@index([payrollEntryId])
  @@map("payroll_adjustments")
}

model PayrollEntries {
  id                      String                 @id @default(uuid())
  payrollPeriodId         String?
  employeeId              String?
  employeeNumber          String?
  employeeName            String?
  nationalId              String?
  overtimeHours           Decimal                @default(0) @db.Decimal(10, 2)
  baseSalary              Decimal                @default(0) @db.Decimal(12, 2)
  commission              Decimal                @default(0) @db.Decimal(12, 2)
  livingAllowance         Decimal                @default(0) @db.Decimal(12, 2)
  vehicleAllowance        Decimal                @default(0) @db.Decimal(12, 2)
  travelAllowance         Decimal                @default(0) @db.Decimal(12, 2)
  overtimePay             Decimal                @default(0) @db.Decimal(12, 2)
  benefitsTotal           Decimal                @default(0) @db.Decimal(12, 2)
  benefitsBreakdown       Json?
  loanDeductions          Decimal                @default(0) @db.Decimal(12, 2)
  advanceDeductions       Decimal                @default(0) @db.Decimal(12, 2)
  advanceBreakdown        Json?
  miscDeductions          Decimal                @default(0) @db.Decimal(12, 2)
  grossPay                Decimal                @default(0) @db.Decimal(12, 2)
  totalDeductions         Decimal                @default(0) @db.Decimal(12, 2)
  netPay                  Decimal                @default(0) @db.Decimal(12, 2)
  adjustmentsTotal        Decimal                @default(0) @db.Decimal(12, 2)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now())
  notes                   String?
  absenceDays             Int                    @default(0)
  dateOfBirth             DateTime?
  hireDate                DateTime?
  leaveDays               Int                    @default(0)
  processedBy             String?
  sickDays                Int                    @default(0)
  terminationDate         DateTime?
  workDays                Int                    @default(0)
  absenceFraction         Decimal                @default(0) @db.Decimal(4, 2)
  contractEndDate         DateTime?
  contractId              String?
  contractNumber          String?
  contractStartDate       DateTime?
  isProrated              Boolean                @default(false)
  doubleTimeOvertimeHours Decimal                @default(0) @db.Decimal(10, 2)
  standardOvertimeHours   Decimal                @default(0) @db.Decimal(10, 2)
  contractSnapshot        Json?
  payroll_adjustments     PayrollAdjustments[]
  employees               Employees?             @relation(fields: [employeeId], references: [id])
  payroll_periods         PayrollPeriods?        @relation(fields: [payrollPeriodId], references: [id], onDelete: Cascade)
  users                   Users?                 @relation(fields: [processedBy], references: [id])
  payroll_entry_benefits  PayrollEntryBenefits[]

  @@index([contractId])
  @@index([employeeId])
  @@index([payrollPeriodId])
  @@map("payroll_entries")
}

model PayrollEntryBenefits {
  id                String         @id @default(uuid())
  payrollEntryId    String
  benefitTypeId     String
  benefitName       String
  amount            Decimal        @db.Decimal(12, 2)
  isActive          Boolean        @default(true)
  deactivatedReason String?
  source            String         @default("contract")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  benefit_types     BenefitTypes   @relation(fields: [benefitTypeId], references: [id], onDelete: Cascade)
  payroll_entries   PayrollEntries @relation(fields: [payrollEntryId], references: [id], onDelete: Cascade)

  @@index([benefitTypeId])
  @@index([payrollEntryId])
  @@map("payroll_entry_benefits")
}

model PayrollExports {
  id              String         @id @default(uuid())
  payrollPeriodId String
  businessId      String
  year            Int
  month           Int
  fileName        String
  fileUrl         String
  fileSize        Int
  format          String         @default("excel")
  includesMonths  Int[]
  employeeCount   Int
  totalGrossPay   Decimal        @db.Decimal(12, 2)
  totalNetPay     Decimal        @db.Decimal(12, 2)
  exportedAt      DateTime?
  exportedBy      String
  generationType  String
  notes           String?
  businesses      Businesses     @relation(fields: [businessId], references: [id], map: "payroll_exports_businessid_fkey")
  users           Users          @relation(fields: [exportedBy], references: [id], map: "payroll_exports_exportedby_fkey")
  payroll_periods PayrollPeriods @relation(fields: [payrollPeriodId], references: [id], map: "payroll_exports_payrollperiodid_fkey")

  @@map("payroll_exports")
}

model PayrollPeriods {
  id                                      String           @id @default(uuid())
  businessId                              String
  year                                    Int
  month                                   Int
  periodStart                             DateTime?
  periodEnd                               DateTime?
  status                                  String           @default("draft")
  totalEmployees                          Int              @default(0)
  totalGrossPay                           Decimal          @default(0) @db.Decimal(12, 2)
  totalDeductions                         Decimal          @default(0) @db.Decimal(12, 2)
  totalNetPay                             Decimal          @default(0) @db.Decimal(12, 2)
  createdAt                               DateTime         @default(now())
  createdBy                               String?
  approvedAt                              DateTime?
  approvedBy                              String?
  exportedAt                              DateTime?
  closedAt                                DateTime?
  notes                                   String?
  updatedAt                               DateTime         @default(now())
  payroll_entries                         PayrollEntries[]
  payroll_exports                         PayrollExports[]
  users_payroll_periods_approvedByTousers Users?           @relation("payroll_periods_approvedByTousers", fields: [approvedBy], references: [id])
  businesses                              Businesses       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  users_payroll_periods_createdByTousers  Users?           @relation("payroll_periods_createdByTousers", fields: [createdBy], references: [id])

  @@unique([businessId, year, month])
  @@index([businessId])
  @@index([year, month])
  @@map("payroll_periods")
}

model PermissionTemplates {
  id                   String                @id @default(uuid())
  name                 String
  permissions          Json                  @default("{}")
  businessType         String
  createdAt            DateTime              @default(now())
  createdBy            String
  isActive             Boolean               @default(true)
  updatedAt            DateTime              @default(now())
  business_memberships BusinessMemberships[]
  users                Users                 @relation(fields: [createdBy], references: [id])

  @@map("permission_templates")
}

model PersonalBudgets {
  id          String   @id @default(uuid())
  amount      Decimal  @db.Decimal(12, 2)
  description String?
  type        String   @default("deposit")
  createdAt   DateTime @default(now())
  userId      String?
  users       Users?   @relation(fields: [userId], references: [id])

  @@map("personal_budgets")
}

model PersonalExpenses {
  id                   String                @id @default(uuid())
  categoryId           String?
  subcategoryId        String?
  category             String
  description          String
  amount               Decimal               @db.Decimal(12, 2)
  date                 DateTime
  tags                 String?
  createdAt            DateTime              @default(now())
  receiptUrl           String?
  userId               String?
  notes                String?
  updatedAt            DateTime              @default(now())
  expense_category     ExpenseCategories?    @relation(fields: [categoryId], references: [id])
  expense_subcategory  ExpenseSubcategories? @relation(fields: [subcategoryId], references: [id])
  loan_transactions    LoanTransactions[]
  users                Users?                @relation(fields: [userId], references: [id])
  project_transactions ProjectTransactions[]

  @@map("personal_expenses")
}

model Persons {
  id                       String                  @id @default(uuid())
  email                    String?                 @unique
  phone                    String
  address                  String?
  notes                    String?
  createdAt                DateTime                @default(now())
  createdBy                String?
  fullName                 String
  idFormatTemplateId       String?
  isActive                 Boolean                 @default(true)
  nationalId               String                  @unique
  updatedAt                DateTime                @default(now())
  driverLicenseNumber      String?
  driverLicenseTemplateId  String?
  inter_business_loans     InterBusinessLoans[]
  users                    Users?                  @relation(fields: [createdBy], references: [id])
  driver_license_templates DriverLicenseTemplates? @relation(fields: [driverLicenseTemplateId], references: [id])
  id_format_templates      IdFormatTemplates?      @relation(fields: [idFormatTemplateId], references: [id])
  project_contractors      ProjectContractors[]
  project_transactions     ProjectTransactions[]

  @@map("persons")
}

model ProductAttributes {
  id                String            @id @default(uuid())
  productId         String
  key               String
  value             String
  dataType          AttributeDataType @default(TEXT)
  displayOrder      Int               @default(0)
  createdAt         DateTime          @default(now())
  business_products BusinessProducts  @relation(fields: [productId], references: [id])

  @@unique([productId, key])
  @@map("product_attributes")
}

model ProductImages {
  id                String           @id @default(uuid())
  productId         String
  imageUrl          String
  altText           String?
  isPrimary         Boolean          @default(false)
  sortOrder         Int              @default(0)
  imageSize         ImageSize        @default(MEDIUM)
  businessType      String
  attributes        Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  business_products BusinessProducts @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductVariants {
  id                       String                   @id @default(uuid())
  productId                String
  name                     String?
  sku                      String                   @unique
  barcode                  String?
  price                    Decimal?                 @db.Decimal(10, 2)
  stockQuantity            Int                      @default(0)
  reorderLevel             Int                      @default(0)
  isActive                 Boolean                  @default(true)
  attributes               Json?
  isAvailable              Boolean                  @default(true)
  originalPrice            Decimal?                 @db.Decimal(10, 2)
  discountPercent          Decimal?                 @db.Decimal(5, 2)
  discountAmount           Decimal?                 @db.Decimal(10, 2)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime
  business_order_items     BusinessOrderItems[]
  business_stock_movements BusinessStockMovements[]
  menu_combo_items         MenuComboItems[]
  business_products        BusinessProducts         @relation(fields: [productId], references: [id])

  @@map("product_variants")
}

model ProjectContractors {
  id                           String                       @id @default(uuid())
  role                         String?
  status                       String                       @default("active")
  notes                        String?
  createdAt                    DateTime                     @default(now())
  endDate                      DateTime?
  hourlyRate                   Decimal?                     @db.Decimal(12, 2)
  isPrimary                    Boolean                      @default(false)
  personId                     String
  projectId                    String
  startDate                    DateTime?
  totalContractAmount          Decimal?                     @db.Decimal(12, 2)
  updatedAt                    DateTime                     @default(now())
  constructionProjectId        String?
  construction_projects        ConstructionProjects?        @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  persons                      Persons                      @relation(fields: [personId], references: [id], onDelete: Cascade)
  projects                     Projects                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  project_transactions         ProjectTransactions[]
  stage_contractor_assignments StageContractorAssignments[]

  @@unique([projectId, personId])
  @@map("project_contractors")
}

model ProjectStages {
  id                           String                       @id @default(uuid())
  name                         String
  description                  String?
  status                       String                       @default("pending")
  notes                        String?
  completionDate               DateTime?
  createdAt                    DateTime                     @default(now())
  endDate                      DateTime?
  estimatedAmount              Decimal?                     @db.Decimal(12, 2)
  orderIndex                   Int                          @default(0)
  projectId                    String
  startDate                    DateTime?
  updatedAt                    DateTime                     @default(now())
  constructionProjectId        String?
  construction_projects        ConstructionProjects?        @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  projects                     Projects                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  project_transactions         ProjectTransactions[]
  stage_contractor_assignments StageContractorAssignments[]

  @@map("project_stages")
}

model ProjectTransactions {
  id                                           String                      @id @default(uuid())
  amount                                       Decimal                     @db.Decimal(12, 2)
  description                                  String
  status                                       String                      @default("pending")
  notes                                        String?
  approvedAt                                   DateTime?
  approvedBy                                   String?
  createdAt                                    DateTime                    @default(now())
  createdBy                                    String?
  paidAt                                       DateTime?
  paymentCategory                              String?
  paymentMethod                                String?
  personalExpenseId                            String
  projectContractorId                          String?
  projectId                                    String
  receiptUrl                                   String?
  recipientPersonId                            String?
  referenceNumber                              String?
  stageAssignmentId                            String?
  stageId                                      String?
  transactionType                              String
  updatedAt                                    DateTime                    @default(now())
  constructionProjectId                        String?
  transactionSubType                           String?
  users_project_transactions_approvedByTousers Users?                      @relation("project_transactions_approvedByTousers", fields: [approvedBy], references: [id])
  construction_projects                        ConstructionProjects?       @relation(fields: [constructionProjectId], references: [id], onDelete: Cascade)
  users_project_transactions_createdByTousers  Users?                      @relation("project_transactions_createdByTousers", fields: [createdBy], references: [id])
  personal_expenses                            PersonalExpenses            @relation(fields: [personalExpenseId], references: [id], onDelete: Cascade)
  project_contractors                          ProjectContractors?         @relation(fields: [projectContractorId], references: [id])
  projects                                     Projects                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  persons                                      Persons?                    @relation(fields: [recipientPersonId], references: [id])
  stage_contractor_assignments                 StageContractorAssignments? @relation(fields: [stageAssignmentId], references: [id])
  project_stages                               ProjectStages?              @relation(fields: [stageId], references: [id])

  @@map("project_transactions")
}

model ProjectTypes {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  description           String?
  businessType          String
  isActive              Boolean                @default(true)
  isSystem              Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  construction_projects ConstructionProjects[]
  projects              Projects[]

  @@map("project_types")
}

model Projects {
  id                   String                @id @default(uuid())
  name                 String
  description          String?
  projectTypeId        String
  businessType         String
  businessId           String?
  status               String                @default("active")
  budget               Decimal?              @db.Decimal(12, 2)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime              @default(now())
  createdBy            String?
  updatedAt            DateTime              @default(now())
  project_contractors  ProjectContractors[]
  project_stages       ProjectStages[]
  project_transactions ProjectTransactions[]
  businesses           Businesses?           @relation(fields: [businessId], references: [id])
  users                Users?                @relation(fields: [createdBy], references: [id])
  project_types        ProjectTypes          @relation(fields: [projectTypeId], references: [id])

  @@map("projects")
}

model Sessions {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model StageContractorAssignments {
  id                   String                @id @default(uuid())
  notes                String?
  createdAt            DateTime              @default(now())
  depositAmount        Decimal?              @db.Decimal(12, 2)
  depositPaidDate      DateTime?
  depositPercentage    Decimal               @default(0.00) @db.Decimal(5, 2)
  finalPaymentDate     DateTime?
  isDepositPaid        Boolean               @default(false)
  isFinalPaymentMade   Boolean               @default(false)
  predeterminedAmount  Decimal               @db.Decimal(12, 2)
  projectContractorId  String
  stageId              String
  updatedAt            DateTime              @default(now())
  project_transactions ProjectTransactions[]
  project_contractors  ProjectContractors    @relation(fields: [projectContractorId], references: [id], onDelete: Cascade)
  project_stages       ProjectStages         @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([stageId, projectContractorId])
  @@map("stage_contractor_assignments")
}

model SupplierProducts {
  id                 String            @id @default(uuid())
  supplierId         String
  productId          String
  supplierSku        String?
  supplierPrice      Decimal           @db.Decimal(10, 2)
  minimumOrder       Int               @default(1)
  leadTimeDays       Int               @default(0)
  isActive           Boolean           @default(true)
  attributes         Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  business_products  BusinessProducts  @relation(fields: [productId], references: [id])
  business_suppliers BusinessSuppliers @relation(fields: [supplierId], references: [id])

  @@unique([supplierId, productId])
  @@map("supplier_products")
}

model SyncConfigurations {
  id                  String    @id @default(uuid())
  nodeId              String    @unique
  registrationKeyHash String?
  lastConfigUpdate    DateTime?
  configMetadata      Json?
  createdAt           DateTime  @default(now())

  @@map("sync_configurations")
}

model SyncEvents {
  eventId         String        @id @default(uuid())
  sourceNodeId    String
  tableName       String
  recordId        String
  operation       SyncOperation
  changeData      Json
  beforeData      Json?
  vectorClock     Json?
  lamportClock    String?
  checksum        String?
  priority        Int           @default(5)
  metadata        Json?
  processed       Boolean       @default(false)
  processedAt     DateTime?
  processingError String?
  retryCount      Int           @default(0)
  createdAt       DateTime      @default(now())

  @@map("sync_events")
}

model SyncMetrics {
  id                   String   @id @default(uuid())
  nodeId               String
  metricDate           DateTime
  eventsGenerated      Int      @default(0)
  eventsReceived       Int      @default(0)
  eventsProcessed      Int      @default(0)
  eventsFailed         Int      @default(0)
  conflictsDetected    Int      @default(0)
  conflictsResolved    Int      @default(0)
  syncLatencyMs        Int?
  networkLatencyMs     Int?
  dataTransferredBytes BigInt?
  peersConnected       Int?     @default(0)
  peersDiscovered      Int?     @default(0)
  createdAt            DateTime @default(now())

  @@unique([nodeId, metricDate], map: "nodeId_metricDate")
  @@map("sync_metrics")
}

model SyncNodes {
  id               String    @id @default(uuid())
  nodeId           String    @unique
  nodeName         String
  ipAddress        String?
  port             Int?
  registrationKey  String?
  publicKey        String?
  isActive         Boolean   @default(true)
  lastSeen         DateTime  @default(now())
  nodeVersion      String?
  databaseVersion  String?
  schemaVersion    String?
  schemaHash       String?
  migrationName    String?
  schemaAppliedAt  DateTime?
  schemaCompatible Boolean   @default(true)
  platformInfo     Json?
  capabilities     Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())

  @@map("sync_nodes")
}

model SyncSessions {
  id           String    @id @default(uuid())
  sessionId    String    @unique
  sourceNodeId String
  targetNodeId String?
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  endTime      DateTime?
  status       String    @default("PENDING")
  errorMessage String?
  metadata     Json?
  createdAt    DateTime  @default(now())

  @@map("sync_sessions")
}

model Users {
  id                                                              String                      @id @default(uuid())
  email                                                           String                      @unique
  passwordHash                                                    String
  name                                                            String
  role                                                            String                      @default("user")
  permissions                                                     Json                        @default("{}")
  isActive                                                        Boolean                     @default(true)
  passwordResetRequired                                           Boolean                     @default(false)
  deactivatedAt                                                   DateTime?
  deactivatedBy                                                   String?
  deactivationReason                                              String?
  deactivationNotes                                               String?
  reactivatedAt                                                   DateTime?
  reactivatedBy                                                   String?
  reactivationNotes                                               String?
  createdAt                                                       DateTime                    @default(now())
  updatedAt                                                       DateTime                    @default(now())
  lastAccessedAt                                                  DateTime?
  lastAccessedBusinessId                                          String?
  lastAccessedBusinessType                                        String?
  username                                                        String?                     @unique
  accounts                                                        Accounts[]
  audit_logs                                                      AuditLogs[]
  business_accounts                                               BusinessAccounts[]
  business_memberships                                            BusinessMemberships[]
  business_transactions                                           BusinessTransactions[]
  chat_messages                                                   ChatMessages[]
  chat_participants                                               ChatParticipants[]
  chat_rooms                                                      ChatRooms[]
  customer_layby_creators                                         CustomerLayby[]             @relation("CustomerLaybyCreator")
  customer_layby_payment_processors                               CustomerLaybyPayment[]      @relation("CustomerLaybyPaymentProcessor")
  construction_expenses                                           ConstructionExpenses[]
  construction_projects                                           ConstructionProjects[]
  driver_authorizations                                           DriverAuthorizations[]
  employees                                                       Employees?
  expense_categories                                              ExpenseCategories[]
  expense_subcategories                                           ExpenseSubcategories[]
  inventory_categories                                            BusinessCategories[]        @relation("CategoryCreatedBy")
  inventory_subcategories                                         InventorySubcategories[]    @relation("SubcategoryCreatedBy")
  fund_sources                                                    FundSources[]
  inter_business_loans_inter_business_loans_createdByTousers      InterBusinessLoans[]        @relation("inter_business_loans_createdByTousers")
  inter_business_loans_inter_business_loans_lenderUserIdTousers   InterBusinessLoans[]        @relation("inter_business_loans_lenderUserIdTousers")
  loan_transactions                                               LoanTransactions[]
  orders                                                          Orders[]
  payroll_adjustments_payroll_adjustments_approvedByTousers       PayrollAdjustments[]        @relation("payroll_adjustments_approvedByTousers")
  payroll_adjustments_payroll_adjustments_createdByTousers        PayrollAdjustments[]        @relation("payroll_adjustments_createdByTousers")
  payroll_entries                                                 PayrollEntries[]
  payroll_exports                                                 PayrollExports[]
  payroll_periods_payroll_periods_approvedByTousers               PayrollPeriods[]            @relation("payroll_periods_approvedByTousers")
  payroll_periods_payroll_periods_createdByTousers                PayrollPeriods[]            @relation("payroll_periods_createdByTousers")
  permission_templates                                            PermissionTemplates[]
  personal_budgets                                                PersonalBudgets[]
  personal_expenses                                               PersonalExpenses[]
  persons                                                         Persons[]
  project_transactions_project_transactions_approvedByTousers     ProjectTransactions[]       @relation("project_transactions_approvedByTousers")
  project_transactions_project_transactions_createdByTousers      ProjectTransactions[]       @relation("project_transactions_createdByTousers")
  projects                                                        Projects[]
  sessions                                                        Sessions[]
  vehicle_drivers                                                 VehicleDrivers[]
  vehicle_expenses                                                VehicleExpenses[]
  vehicle_maintenance_records                                     VehicleMaintenanceRecords[]
  vehicle_reimbursements_vehicle_reimbursements_approvedByTousers VehicleReimbursements[]     @relation("vehicle_reimbursements_approvedByTousers")
  vehicle_reimbursements_vehicle_reimbursements_userIdTousers     VehicleReimbursements[]     @relation("vehicle_reimbursements_userIdTousers")
  vehicles                                                        Vehicles[]

  @@map("users")
}

model VehicleDrivers {
  id                    String                 @id @default(uuid())
  fullName              String
  licenseNumber         String                 @unique
  licenseExpiry         DateTime
  phoneNumber           String?
  emailAddress          String?
  emergencyContact      String?
  emergencyPhone        String?
  userId                String?
  isActive              Boolean                @default(true)
  dateOfBirth           DateTime?
  address               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  driver_authorizations DriverAuthorizations[]
  users                 Users?                 @relation(fields: [userId], references: [id])
  vehicle_trips         VehicleTrips[]

  @@map("vehicle_drivers")
}

model VehicleExpenses {
  id                   String        @id @default(uuid())
  vehicleId            String
  tripId               String?
  businessId           String?
  expenseType          ExpenseType
  expenseCategory      String?
  amount               Decimal       @db.Decimal(10, 2)
  currency             String        @default("USD")
  expenseDate          DateTime
  isBusinessDeductible Boolean       @default(false)
  receiptUrl           String?
  vendorName           String?
  description          String?
  mileageAtExpense     Int?
  fuelQuantity         Decimal?      @db.Decimal(8, 2)
  fuelType             FuelType?
  createdBy            String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  businesses           Businesses?   @relation(fields: [businessId], references: [id])
  users                Users         @relation(fields: [createdBy], references: [id])
  vehicle_trips        VehicleTrips? @relation(fields: [tripId], references: [id])
  vehicles             Vehicles      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_expenses")
}

model VehicleLicenses {
  id               String      @id @default(uuid())
  vehicleId        String
  licenseType      LicenseType
  licenseNumber    String
  issuingAuthority String?
  issueDate        DateTime
  expiryDate       DateTime
  renewalCost      Decimal?    @db.Decimal(10, 2)
  isActive         Boolean     @default(true)
  documentUrl      String?
  reminderDays     Int         @default(30)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  vehicles         Vehicles    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_licenses")
}

model VehicleMaintenanceRecords {
  id                           String                       @id @default(uuid())
  vehicleId                    String
  serviceType                  ServiceType
  serviceCategory              String?
  serviceName                  String
  serviceDate                  DateTime
  mileageAtService             Int
  nextServiceDue               DateTime?
  nextServiceMileage           Int?
  serviceCost                  Decimal                      @db.Decimal(10, 2)
  serviceProvider              String?
  serviceLocation              String?
  partsReplaced                Json?
  warrantyInfo                 String?
  receiptUrl                   String?
  notes                        String?
  isScheduledService           Boolean                      @default(false)
  createdBy                    String
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime
  users                        Users                        @relation(fields: [createdBy], references: [id])
  vehicles                     Vehicles                     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicle_maintenance_services VehicleMaintenanceServices[]

  @@map("vehicle_maintenance_records")
}

model VehicleMaintenanceServiceExpenses {
  id                           String                     @id @default(uuid())
  serviceId                    String
  expenseType                  String
  amount                       Decimal                    @db.Decimal(10, 2)
  currency                     String                     @default("USD")
  description                  String?
  vendorName                   String?
  isBusinessDeductible         Boolean                    @default(false)
  receiptUrl                   String?
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime
  vehicle_maintenance_services VehicleMaintenanceServices @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("vehicle_maintenance_service_expenses")
}

model VehicleMaintenanceServices {
  id                                   String                              @id @default(uuid())
  maintenanceRecordId                  String
  serviceName                          String
  serviceType                          String
  cost                                 Decimal                             @db.Decimal(10, 2)
  currency                             String                              @default("USD")
  serviceProvider                      String?
  description                          String?
  isScheduledService                   Boolean                             @default(false)
  warrantyUntil                        String?
  receiptUrl                           String?
  createdAt                            DateTime                            @default(now())
  updatedAt                            DateTime
  vehicle_maintenance_service_expenses VehicleMaintenanceServiceExpenses[]
  vehicle_maintenance_records          VehicleMaintenanceRecords           @relation(fields: [maintenanceRecordId], references: [id], onDelete: Cascade)

  @@map("vehicle_maintenance_services")
}

model VehicleReimbursements {
  id                                             String              @id @default(uuid())
  userId                                         String
  vehicleId                                      String
  businessId                                     String
  reimbursementPeriod                            String
  totalMileage                                   Int
  businessMileage                                Int
  personalMileage                                Int
  statutoryRate                                  Decimal             @db.Decimal(8, 4)
  totalAmount                                    Decimal             @db.Decimal(10, 2)
  status                                         ReimbursementStatus @default(PENDING)
  submissionDate                                 DateTime
  approvalDate                                   DateTime?
  paymentDate                                    DateTime?
  approvedBy                                     String?
  notes                                          String?
  createdAt                                      DateTime            @default(now())
  updatedAt                                      DateTime
  users_vehicle_reimbursements_approvedByTousers Users?              @relation("vehicle_reimbursements_approvedByTousers", fields: [approvedBy], references: [id])
  businesses                                     Businesses          @relation(fields: [businessId], references: [id])
  users_vehicle_reimbursements_userIdTousers     Users               @relation("vehicle_reimbursements_userIdTousers", fields: [userId], references: [id])
  vehicles                                       Vehicles            @relation(fields: [vehicleId], references: [id])

  @@map("vehicle_reimbursements")
}

model VehicleTrips {
  id                    String               @id @default(uuid())
  vehicleId             String
  driverId              String
  businessId            String?
  startMileage          Int
  endMileage            Int?
  tripMileage           Int                  @default(0)
  tripPurpose           String
  tripType              TripType
  startLocation         String?
  endLocation           String?
  startTime             DateTime
  endTime               DateTime?
  isCompleted           Boolean              @default(false)
  notes                 String?
  gpsTrackingData       Json?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime
  vehicle_expenses      VehicleExpenses[]
  businesses            Businesses?          @relation(fields: [businessId], references: [id])
  vehicle_drivers       VehicleDrivers       @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driver_authorizations DriverAuthorizations @relation(fields: [driverId, vehicleId], references: [driverId, vehicleId])
  vehicles              Vehicles             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_trips")
}

model Vehicles {
  id                          String                      @id @default(uuid())
  licensePlate                String                      @unique
  vin                         String                      @unique
  make                        String
  model                       String
  year                        Int
  color                       String?
  weight                      Decimal?                    @db.Decimal(10, 2)
  driveType                   DriveType
  ownershipType               OwnershipType
  currentMileage              Int
  businessId                  String?
  userId                      String?
  isActive                    Boolean                     @default(true)
  purchaseDate                DateTime?
  purchasePrice               Decimal?                    @db.Decimal(12, 2)
  notes                       String?
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime
  hasInitialMileage           Boolean                     @default(false)
  mileageUnit                 String                      @default("km")
  driver_authorizations       DriverAuthorizations[]
  vehicle_expenses            VehicleExpenses[]
  vehicle_licenses            VehicleLicenses[]
  vehicle_maintenance_records VehicleMaintenanceRecords[]
  vehicle_reimbursements      VehicleReimbursements[]
  vehicle_trips               VehicleTrips[]
  businesses                  Businesses?                 @relation(fields: [businessId], references: [id])
  users                       Users?                      @relation(fields: [userId], references: [id])

  @@map("vehicles")
}

enum AttributeDataType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  LIST
  JSON
}

enum AuthorizationLevel {
  BASIC
  ADVANCED
  EMERGENCY
}

enum ConflictType {
  UPDATE_UPDATE
  UPDATE_DELETE
  DELETE_UPDATE
  VECTOR_CLOCK
  TIMESTAMP
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
  CONTRACTOR
  WHOLESALE
  VIP
}

enum DriveType {
  LEFT_HAND
  RIGHT_HAND
}

enum ExpenseType {
  FUEL
  TOLL
  PARKING
  MAINTENANCE
  INSURANCE
  OTHER
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum ImageSize {
  THUMBNAIL
  SMALL
  MEDIUM
  LARGE
  ORIGINAL
}

enum LicenseType {
  REGISTRATION
  RADIO
  ROAD_USE
  INSURANCE
  INSPECTION
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderType {
  SALE
  RETURN
  EXCHANGE
  SERVICE
  KITCHEN_TICKET
  RENTAL
  SUBSCRIPTION
}

enum OwnershipType {
  PERSONAL
  BUSINESS
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  STORE_CREDIT
  LAYAWAY
  NET_30
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  REFUNDED
  FAILED
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
  DAMAGED
  EXPIRED
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
  COMBO
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_ONE_GET_ONE
  COMBO_DEAL
  HAPPY_HOUR
  CATEGORY_DISCOUNT
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum ResolutionStrategy {
  LATEST_TIMESTAMP
  HIGHEST_PRIORITY
  MANUAL_RESOLUTION
  SOURCE_WINS
  TARGET_WINS
  MERGE_FIELDS
  LAST_WRITER_WINS
  NODE_PRIORITY
  MERGE_CHANGES
  BUSINESS_RULE
  KEEP_BOTH
}

enum ServiceType {
  OIL_CHANGE
  TIRE_REPLACEMENT
  BRAKE_SERVICE
  INSPECTION
  REPAIR
  OTHER
}

enum StockMovementType {
  PURCHASE_RECEIVED
  SALE
  RETURN_IN
  RETURN_OUT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  DAMAGE
  THEFT
  EXPIRED
  PRODUCTION_IN
  PRODUCTION_OUT
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
  TRUNCATE
}

enum TripType {
  BUSINESS
  PERSONAL
  MIXED
}

enum LaybyStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DEFAULTED
  ON_HOLD
}

enum InstallmentFrequency {
  WEEKLY
  FORTNIGHTLY
  MONTHLY
  CUSTOM
}
