'use client'

import { useState, useEffect } from 'react'
import { PhoneNumberInput } from '@/components/ui/phone-number-input'
import { UniversalSupplier, UniversalSupplierFormProps, BusinessType, SupplierStatus, PaymentTerms, ReliabilityRating } from '@/types/supplier'

const paymentTermsOptions = [
  { value: 'cod', label: 'Cash on Delivery' },
  { value: 'net_15', label: 'Net 15 Days' },
  { value: 'net_30', label: 'Net 30 Days' },
  { value: 'net_45', label: 'Net 45 Days' },
  { value: 'net_60', label: 'Net 60 Days' },
  { value: 'prepaid', label: 'Prepaid' },
  { value: 'custom', label: 'Custom Terms' }
]

const statusOptions = [
  { value: 'active', label: 'Active' },
  { value: 'inactive', label: 'Inactive' },
  { value: 'pending', label: 'Pending' },
  { value: 'suspended', label: 'Suspended' }
]

const reliabilityOptions = [
  { value: 'excellent', label: 'Excellent' },
  { value: 'good', label: 'Good' },
  { value: 'fair', label: 'Fair' },
  { value: 'poor', label: 'Poor' }
]

const businessCategoryOptions = {
  hardware: [
    'Lumber & Building Materials',
    'Fasteners & Hardware',
    'Paint & Finishing',
    'Tools & Equipment',
    'Electrical Supplies',
    'Plumbing Supplies',
    'HVAC Supplies',
    'Safety Equipment'
  ],
  grocery: [
    'Fresh Produce',
    'Dairy & Eggs',
    'Meat & Seafood',
    'Frozen Foods',
    'Bakery Goods',
    'Beverages',
    'Packaged Foods',
    'Health & Beauty'
  ],
  restaurant: [
    'Fresh Produce',
    'Proteins & Meat',
    'Dairy Products',
    'Beverages',
    'Bakery & Bread',
    'Spices & Seasonings',
    'Kitchen Equipment',
    'Disposables'
  ],
  clothing: [
    'Fabrics & Materials',
    'Finished Garments',
    'Accessories',
    'Footwear',
    'Jewelry',
    'Bags & Luggage',
    'Seasonal Items',
    'Designer Collections'
  ],
  construction: [
    'Heavy Equipment',
    'Construction Materials',
    'Concrete & Masonry',
    'Steel & Metal',
    'Roofing Materials',
    'Excavation Services',
    'Rental Equipment',
    'Specialty Tools'
  ]
}

export function UniversalSupplierForm({
  businessId,
  businessType,
  supplier,
  onSubmit,
  onCancel,
  loading = false,
  customFields = []
}: UniversalSupplierFormProps) {
  const [formData, setFormData] = useState<Partial<UniversalSupplier>>({
    businessId,
    businessType,
    name: '',
    code: '',
    category: '',
    contact: {
      primaryContact: '',
      phone: '',
      email: '',
      website: '',
      address: {
        street: '',
        city: '',
        state: '',
        zipCode: '',
        country: 'USA'
      },
      alternateContacts: []
    },
    terms: {
      paymentTerms: 'net_30' as PaymentTerms,
      customPaymentTerms: '',
      minimumOrder: 0,
      currency: 'USD',
      leadTimeDays: 7,
      shippingTerms: '',
      warrantyDays: 0,
      returnPolicy: ''
    },
    performance: {
      onTimeDeliveryPercent: 95,
      qualityScore: 8.5,
      totalOrders: 0,
      totalSpent: 0,
      reliability: 'good' as ReliabilityRating,
      averageLeadTime: 7,
      issueCount: 0,
      responseTimeHours: 24
    },
    certifications: [],
    attributes: {},
    status: 'active' as SupplierStatus,
    tags: [],
    notes: ''
  })

  const [activeTab, setActiveTab] = useState('basic')
  const [errors, setErrors] = useState<Record<string, string>>({})

  useEffect(() => {
    if (supplier) {
      setFormData(supplier)
    }
  }, [supplier])

  const generateSupplierCode = (name: string, businessType: BusinessType) => {
    const prefix = businessType.substring(0, 3).toUpperCase()
    const nameCode = name.replace(/[^a-zA-Z0-9]/g, '').substring(0, 6).toUpperCase()
    const timestamp = Date.now().toString().slice(-4)
    return `${prefix}-${nameCode}-${timestamp}`
  }

  const handleInputChange = (path: string, value: any) => {
    setFormData(prev => {
      const newData = { ...prev }
      const keys = path.split('.')
      let current: any = newData

      for (let i = 0; i < keys.length - 1; i++) {
        if (!current[keys[i]]) {
          current[keys[i]] = {}
        }
        current = current[keys[i]]
      }

      current[keys[keys.length - 1]] = value

      // Auto-generate code when name changes
      if (path === 'name' && value && !supplier) {
        const newCode = generateSupplierCode(value, businessType)
        const codeKeys = 'code'.split('.')
        let codeTarget: any = newData
        for (let i = 0; i < codeKeys.length - 1; i++) {
          codeTarget = codeTarget[codeKeys[i]]
        }
        codeTarget[codeKeys[codeKeys.length - 1]] = newCode
      }

      return newData
    })

    // Clear error when field is updated
    if (errors[path]) {
      setErrors(prev => ({ ...prev, [path]: '' }))
    }
  }

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.name?.trim()) {
      newErrors['name'] = 'Supplier name is required'
    }

    if (!formData.category) {
      newErrors['category'] = 'Category is required'
    }

    if (!formData.contact?.primaryContact?.trim()) {
      newErrors['contact.primaryContact'] = 'Primary contact is required'
    }

    if (!formData.contact?.email?.trim()) {
      newErrors['contact.email'] = 'Email is required'
    } else if (!/\S+@\S+\.\S+/.test(formData.contact.email)) {
      newErrors['contact.email'] = 'Invalid email format'
    }

    if (!formData.contact?.phone?.trim()) {
      newErrors['contact.phone'] = 'Phone is required'
    }

    if (!formData.terms?.minimumOrder || formData.terms.minimumOrder < 0) {
      newErrors['terms.minimumOrder'] = 'Minimum order must be 0 or greater'
    }

    if (!formData.terms?.leadTimeDays || formData.terms.leadTimeDays < 1) {
      newErrors['terms.leadTimeDays'] = 'Lead time must be at least 1 day'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    const submitData = {
      ...formData,
      createdAt: supplier?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      createdBy: supplier?.createdBy || 'current-user',
      lastUpdatedBy: 'current-user'
    }

    onSubmit(submitData)
  }

  const tabs = [
    { id: 'basic', label: 'Basic Info', icon: '📋' },
    { id: 'contact', label: 'Contact', icon: '📞' },
    { id: 'terms', label: 'Terms', icon: '📄' },
    { id: 'performance', label: 'Performance', icon: '📊' },
    { id: 'additional', label: 'Additional', icon: '⚙️' }
  ]

  const getBusinessIcon = (businessType: BusinessType) => {
    const icons = {
      hardware: '🔧',
      grocery: '🛒',
      restaurant: '🍽️',
      clothing: '👕',
      construction: '🏗️'
    }
    return icons[businessType] || '🏢'
  }

  const renderError = (path: string) => {
    if (errors[path]) {
      return <span className="text-red-500 text-xs mt-1">{errors[path]}</span>
    }
    return null
  }

  return (
    <div className="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden flex flex-col">
      {/* Header */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <span className="text-2xl">{getBusinessIcon(businessType)}</span>
            <div>
              <h3 className="text-lg font-semibold">
                {supplier ? 'Edit' : 'Add'} {businessType.charAt(0).toUpperCase() + businessType.slice(1)} Supplier
              </h3>
              {/* Use clothing modal description styling for clothing and grocery to keep them visually consistent */}
              <p className={
                `text-sm ${businessType === 'clothing' || businessType === 'grocery' ? 'text-purple-600' : 'text-gray-600'}`
              }>
                {supplier ? 'Update supplier information' : 'Add a new supplier to your directory'}
              </p>
            </div>
          </div>
          <button
            onClick={onCancel}
            className="text-gray-400 hover:text-gray-600"
          >
            ✕
          </button>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8 px-6" aria-label="Tabs">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <span>{tab.icon}</span>
              {tab.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Form Content */}
      <div className="flex-1 overflow-y-auto">
        <form onSubmit={handleSubmit} className="p-6">
          {/* Basic Info Tab */}
          {activeTab === 'basic' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Supplier Name *
                  </label>
                  <input
                    type="text"
                    value={formData.name || ''}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter supplier name"
                  />
                  {renderError('name')}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Supplier Code
                  </label>
                  <input
                    type="text"
                    value={formData.code || ''}
                    onChange={(e) => handleInputChange('code', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Auto-generated or enter custom code"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category *
                  </label>
                  <select
                    value={formData.category || ''}
                    onChange={(e) => handleInputChange('category', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select category</option>
                    {businessCategoryOptions[businessType]?.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                  {renderError('category')}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select
                    value={formData.status || 'active'}
                    onChange={(e) => handleInputChange('status', e.target.value as SupplierStatus)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {statusOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Notes
                </label>
                <textarea
                  value={formData.notes || ''}
                  onChange={(e) => handleInputChange('notes', e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Additional notes about this supplier"
                />
              </div>
            </div>
          )}

          {/* Contact Tab */}
          {activeTab === 'contact' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Primary Contact *
                  </label>
                  <input
                    type="text"
                    value={formData.contact?.primaryContact || ''}
                    onChange={(e) => handleInputChange('contact.primaryContact', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Contact person name"
                  />
                  {renderError('contact.primaryContact')}
                </div>

                <div>
                  <PhoneNumberInput
                    value={formData.contact?.phone || ''}
                    onChange={(fullPhone) => handleInputChange('contact.phone', fullPhone)}
                    label="Phone"
                    placeholder="(555) 123-4567"
                    required={true}
                    error={errors['contact.phone']}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email *
                  </label>
                  <input
                    type="email"
                    value={formData.contact?.email || ''}
                    onChange={(e) => handleInputChange('contact.email', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="contact@supplier.com"
                  />
                  {renderError('contact.email')}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Website
                  </label>
                  <input
                    type="url"
                    value={formData.contact?.website || ''}
                    onChange={(e) => handleInputChange('contact.website', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="https://supplier.com"
                  />
                </div>
              </div>

              <div>
                <h4 className="text-sm font-medium text-gray-700 mb-3">Address</h4>
                <div className="grid grid-cols-1 gap-4">
                  <div>
                    <input
                      type="text"
                      value={formData.contact?.address?.street || ''}
                      onChange={(e) => handleInputChange('contact.address.street', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Street address"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <input
                        type="text"
                        value={formData.contact?.address?.city || ''}
                        onChange={(e) => handleInputChange('contact.address.city', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="City"
                      />
                    </div>
                    <div>
                      <input
                        type="text"
                        value={formData.contact?.address?.state || ''}
                        onChange={(e) => handleInputChange('contact.address.state', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="State"
                      />
                    </div>
                    <div>
                      <input
                        type="text"
                        value={formData.contact?.address?.zipCode || ''}
                        onChange={(e) => handleInputChange('contact.address.zipCode', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="ZIP Code"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Terms Tab */}
          {activeTab === 'terms' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Payment Terms
                  </label>
                  <select
                    value={formData.terms?.paymentTerms || 'net_30'}
                    onChange={(e) => handleInputChange('terms.paymentTerms', e.target.value as PaymentTerms)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {paymentTermsOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Currency
                  </label>
                  <select
                    value={formData.terms?.currency || 'USD'}
                    onChange={(e) => handleInputChange('terms.currency', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="USD">USD - US Dollar</option>
                    <option value="EUR">EUR - Euro</option>
                    <option value="GBP">GBP - British Pound</option>
                    <option value="CAD">CAD - Canadian Dollar</option>
                  </select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Minimum Order Amount *
                  </label>
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.terms?.minimumOrder || 0}
                    onChange={(e) => handleInputChange('terms.minimumOrder', parseFloat(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="0.00"
                  />
                  {renderError('terms.minimumOrder')}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Lead Time (Days) *
                  </label>
                  <input
                    type="number"
                    min="1"
                    value={formData.terms?.leadTimeDays || 7}
                    onChange={(e) => handleInputChange('terms.leadTimeDays', parseInt(e.target.value) || 7)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="7"
                  />
                  {renderError('terms.leadTimeDays')}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Shipping Terms
                  </label>
                  <input
                    type="text"
                    value={formData.terms?.shippingTerms || ''}
                    onChange={(e) => handleInputChange('terms.shippingTerms', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="FOB Origin, CIF, etc."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Warranty (Days)
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={formData.terms?.warrantyDays || 0}
                    onChange={(e) => handleInputChange('terms.warrantyDays', parseInt(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="0"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Return Policy
                </label>
                <textarea
                  value={formData.terms?.returnPolicy || ''}
                  onChange={(e) => handleInputChange('terms.returnPolicy', e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Describe the return policy..."
                />
              </div>
            </div>
          )}

          {/* Performance Tab */}
          {activeTab === 'performance' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    On-Time Delivery (%)
                  </label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    step="0.1"
                    value={formData.performance?.onTimeDeliveryPercent || 95}
                    onChange={(e) => handleInputChange('performance.onTimeDeliveryPercent', parseFloat(e.target.value) || 95)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Quality Score (1-10)
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="10"
                    step="0.1"
                    value={formData.performance?.qualityScore || 8.5}
                    onChange={(e) => handleInputChange('performance.qualityScore', parseFloat(e.target.value) || 8.5)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Total Orders
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={formData.performance?.totalOrders || 0}
                    onChange={(e) => handleInputChange('performance.totalOrders', parseInt(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Total Spent
                  </label>
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.performance?.totalSpent || 0}
                    onChange={(e) => handleInputChange('performance.totalSpent', parseFloat(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Reliability Rating
                  </label>
                  <select
                    value={formData.performance?.reliability || 'good'}
                    onChange={(e) => handleInputChange('performance.reliability', e.target.value as ReliabilityRating)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {reliabilityOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Response Time (Hours)
                  </label>
                  <input
                    type="number"
                    min="1"
                    value={formData.performance?.responseTimeHours || 24}
                    onChange={(e) => handleInputChange('performance.responseTimeHours', parseInt(e.target.value) || 24)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Additional Tab */}
          {activeTab === 'additional' && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tags (comma-separated)
                </label>
                <input
                  type="text"
                  value={formData.tags?.join(', ') || ''}
                  onChange={(e) => handleInputChange('tags', e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="reliable, fast-delivery, local"
                />
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium text-gray-700 mb-3">Business-Specific Information</h4>
                <p className="text-sm text-gray-600">
                  Additional business-specific fields and configurations can be added here based on the {businessType} business type.
                </p>
              </div>
            </div>
          )}
        </form>
      </div>

      {/* Footer */}
      <div className="p-6 border-t border-gray-200 bg-gray-50">
        <div className="flex justify-end gap-3">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 text-sm text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
            disabled={loading}
          >
            Cancel
          </button>
          <button
            type="submit"
            onClick={handleSubmit}
            disabled={loading}
            className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Saving...' : (supplier ? 'Update Supplier' : 'Add Supplier')}
          </button>
        </div>
      </div>
    </div>
  )
}