'use client'

import { BusinessProtectedRoute } from '@/components/auth/business-protected-route'
import { ContentLayout } from '@/components/layout/content-layout'
import { useState, useEffect, useMemo } from 'react'
import { useSession } from 'next-auth/react'
import { formatDateByFormat } from '@/lib/country-codes'
import { useDateFormat } from '@/contexts/settings-context'
import { BusinessBalanceDisplay } from '@/components/business/business-balance-display'
import { BalanceValidationWarning } from '@/components/business/balance-validation-warning'
import { useBusinessBalance } from '@/hooks/useBusinessBalance'
import Link from 'next/link'

interface Business {
  id: string
  name: string
  type: string
  description?: string
  isUmbrellaBusiness?: boolean
  isUserBusiness?: boolean
}

interface Loan {
  id: string
  loanNumber: string
  principalAmount: number
  remainingBalance: number
  totalAmount: number
  interestRate: number
  lenderType: string
  status: string
  loanDate: string
  dueDate?: string
  terms?: string
  notes?: string
  borrowerBusiness: { name: string }
  lenderBusiness?: { name: string }
  loanTransactions: Array<{
    id: string
    transactionType: string
    amount: number
    description: string
    transactionDate: string
    isAutoGenerated: boolean
  }>
}

export default function BusinessLoansPage() {
  const { data: session } = useSession()
  const globalDateFormat = useDateFormat()
  const [loans, setLoans] = useState<Loan[]>([])
  const [businesses, setBusinesses] = useState<Business[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateLoanModal, setShowCreateLoanModal] = useState(false)
  const [showLoanDetailsModal, setShowLoanDetailsModal] = useState(false)
  const [showPaymentModal, setShowPaymentModal] = useState(false)
  const [selectedLoan, setSelectedLoan] = useState<Loan | null>(null)

  const [newLoan, setNewLoan] = useState({
    lenderBusinessId: '',
    borrowerBusinessId: '',
    principalAmount: '',
    interestRate: '0',
    terms: '',
    notes: '',
    loanDate: new Date().toISOString().split('T')[0],
    dueDate: '',
    transferType: 'loan' // 'loan' or 'profit_transfer'
  })

  const [newPayment, setNewPayment] = useState({
    transactionType: 'payment',
    amount: '',
    description: '',
    transactionDate: new Date().toISOString().split('T')[0],
    notes: ''
  })

  // Balance tracking for loan creation
  const lenderBalance = useBusinessBalance(newLoan.lenderBusinessId || null)

  // For payments: borrower business pays, for advances: lender business pays
  const getPaymentBusinessId = () => {
    if (!selectedLoan) return null

    if (newPayment.transactionType === 'payment') {
      // Payment: borrower business is paying
      return selectedLoan.borrowerBusiness?.id || null
    } else {
      // Advance: lender business is paying
      return selectedLoan.lenderBusiness?.id || null
    }
  }

  const paymentBusinessBalance = useBusinessBalance(getPaymentBusinessId())

  // Validation for loan creation
  const loanValidation = useMemo(() => {
    if (!newLoan.lenderBusinessId || !newLoan.principalAmount) return null
    const amount = parseFloat(newLoan.principalAmount)
    if (isNaN(amount) || amount <= 0) return null
    return lenderBalance.validateAmount(amount)
  }, [newLoan.lenderBusinessId, newLoan.principalAmount, lenderBalance])

  // Validation for payments
  const paymentValidation = useMemo(() => {
    if (!selectedLoan || !newPayment.amount) return null
    const amount = parseFloat(newPayment.amount)
    if (isNaN(amount) || amount <= 0) return null
    return paymentBusinessBalance.validateAmount(amount)
  }, [selectedLoan, newPayment.amount, paymentBusinessBalance])

  // Helper function to format dates according to global settings
  const formatDate = (dateString: string) => {
    if (!dateString) return ''
    return formatDateByFormat(dateString, globalDateFormat)
  }

  useEffect(() => {
    fetchLoans()
    fetchBusinesses()
  }, [])

  const fetchLoans = async () => {
    try {
      const response = await fetch('/api/business/loans', { credentials: 'include' })
      if (response.ok) {
        const data = await response.json()
        setLoans(Array.isArray(data) ? data : [])
      }
    } catch (error) {
      console.error('Failed to fetch loans:', error)
      setLoans([])
    } finally {
      setLoading(false)
    }
  }

  const fetchBusinesses = async () => {
    try {
      const response = await fetch('/api/business/available-borrowers', { credentials: 'include' })
      if (response.ok) {
        const data = await response.json()
        setBusinesses(Array.isArray(data) ? data : [])
      }
    } catch (error) {
      console.error('Failed to fetch businesses:', error)
      setBusinesses([])
    }
  }

  const handleCreateLoan = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!newLoan.lenderBusinessId || !newLoan.borrowerBusinessId || !newLoan.principalAmount) {
      alert('Please fill in all required fields')
      return
    }

    // Prevent self-loans (business lending to itself)
    if (newLoan.lenderBusinessId === newLoan.borrowerBusinessId) {
      alert('A business cannot loan money to itself. Please select different lender and borrower businesses.')
      return
    }

    try {
      const response = await fetch('/api/business/loans', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          lenderBusinessId: newLoan.lenderBusinessId,
          borrowerBusinessId: newLoan.borrowerBusinessId,
          principalAmount: parseFloat(newLoan.principalAmount),
          interestRate: parseFloat(newLoan.interestRate) || 0,
          terms: newLoan.terms,
          notes: newLoan.notes,
          loanDate: newLoan.loanDate,
          dueDate: newLoan.dueDate || null,
          transferType: newLoan.transferType
        })
      })

      if (response.ok) {
        await fetchLoans()
        setShowCreateLoanModal(false)
        setNewLoan({
          lenderBusinessId: '',
          borrowerBusinessId: '',
          principalAmount: '',
          interestRate: '0',
          terms: '',
          notes: '',
          loanDate: new Date().toISOString().split('T')[0],
          dueDate: '',
          transferType: 'loan'
        })
        alert('Loan created successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to create loan: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Error creating loan:', error)
      alert('Error creating loan')
    }
  }

  const handleLoanClick = (loan: Loan) => {
    setSelectedLoan(loan)
    setShowLoanDetailsModal(true)
  }

  const handlePaymentClick = (loan: Loan) => {
    setSelectedLoan(loan)
    setShowPaymentModal(true)
  }

  const handleMakePayment = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedLoan || !newPayment.amount || !newPayment.description) {
      alert('Please fill in all required fields')
      return
    }

    try {
      const response = await fetch(`/api/business/loans/${selectedLoan.id}/transactions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          transactionType: newPayment.transactionType,
          amount: parseFloat(newPayment.amount),
          description: newPayment.description,
          transactionDate: newPayment.transactionDate,
          notes: newPayment.notes
        })
      })

      if (response.ok) {
        await fetchLoans() // Refresh loan data
        setShowPaymentModal(false)
        setNewPayment({
          transactionType: 'payment',
          amount: '',
          description: '',
          transactionDate: new Date().toISOString().split('T')[0],
          notes: ''
        })
        alert('Payment processed successfully!')
      } else {
        const error = await response.json()
        alert(`Failed to process payment: ${error.error || 'Unknown error'}`)
      }
    } catch (error) {
      console.error('Error processing payment:', error)
      alert('Error processing payment')
    }
  }

  return (
    <BusinessProtectedRoute requiredPermission="canAccessFinancialData">
      <ContentLayout
        title="💰 Business Loans"
        breadcrumb={[
          { label: 'Dashboard', href: '/dashboard' },
          { label: 'Business Management', href: '/business/manage' },
          { label: 'Loans', isActive: true }
        ]}
        headerActions={
          <div className="flex gap-3">
            <Link
              href="/business/manage/loans/analytics"
              className="btn-secondary"
            >
              📊 View Analytics
            </Link>
            <button
              onClick={() => setShowCreateLoanModal(true)}
              className="btn-primary"
            >
              💰 Create New Loan
            </button>
          </div>
        }
      >
        <div className="space-y-6">
          {/* Loans Statistics */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Total Loans</h3>
              <p className="text-3xl font-bold text-blue-600">{loans.length}</p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Active Loans</h3>
              <p className="text-3xl font-bold text-green-600">
                {loans.filter(loan => loan.status === 'active').length}
              </p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Total Outstanding</h3>
              <p className="text-3xl font-bold text-orange-600">
                ${loans.reduce((sum, loan) => sum + (loan.status === 'active' ? loan.remainingBalance : 0), 0).toFixed(2)}
              </p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Paid Loans</h3>
              <p className="text-3xl font-bold text-gray-600">
                {loans.filter(loan => loan.status === 'paid').length}
              </p>
            </div>
          </div>

          {/* Loans Table */}
          <div className="card">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-xl font-semibold text-primary">Loan Management</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Loan #</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Type</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Lender → Borrower</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Principal</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Balance</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Interest</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {loading ? (
                    <tr>
                      <td colSpan={8} className="px-6 py-8 text-center text-secondary">
                        Loading loans...
                      </td>
                    </tr>
                  ) : loans.length === 0 ? (
                    <tr>
                      <td colSpan={8} className="px-6 py-8 text-center text-secondary">
                        No loans found. Create your first loan to get started!
                      </td>
                    </tr>
                  ) : (
                    loans.map(loan => (
                      <tr 
                        key={loan.id}
                        className="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors"
                        onClick={() => handleLoanClick(loan)}
                      >
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-primary">
                          {loan.loanNumber}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 text-xs font-medium rounded ${
                            loan.terms?.includes('[PROFIT_TRANSFER]')
                              ? 'bg-green-100 text-green-800'
                              : 'bg-blue-100 text-blue-800'
                          }`}>
                            {loan.terms?.includes('[PROFIT_TRANSFER]') ? '📈 Profit Transfer' : '🏢 B2B Loan'}
                          </span>
                        </td>
                        <td className="px-6 py-4 text-sm text-primary">
                          {loan.lenderType === 'personal' ? 'Personal' : loan.lenderBusiness?.name || 'Your Business'} → {loan.borrowerBusiness.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          ${loan.principalAmount.toFixed(2)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-orange-600">
                          ${loan.remainingBalance.toFixed(2)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          {loan.interestRate}%
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 text-xs font-medium rounded ${
                            loan.status === 'active' 
                              ? 'bg-green-100 text-green-800' 
                              : loan.status === 'paid'
                              ? 'bg-gray-100 text-gray-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {loan.status.charAt(0).toUpperCase() + loan.status.slice(1)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <div className="flex gap-2">
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                handleLoanClick(loan)
                              }}
                              className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
                            >
                              View Details
                            </button>
                            {loan.status === 'active' && loan.remainingBalance > 0 && (
                              <button
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handlePaymentClick(loan)
                                }}
                                className="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 font-medium"
                              >
                                Make Payment
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Create Loan Modal */}
        {showCreateLoanModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
              <h2 className="text-xl font-semibold text-primary mb-4">
                {newLoan.transferType === 'profit_transfer' ? 'Create Profit Transfer' : 'Create New Loan'}
              </h2>
              <form onSubmit={handleCreateLoan} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Transfer Type *
                  </label>
                  <div className="flex gap-4">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="transferType"
                        value="loan"
                        checked={newLoan.transferType === 'loan'}
                        onChange={(e) => setNewLoan({
                          ...newLoan,
                          transferType: e.target.value,
                          interestRate: e.target.value === 'loan' ? '0' : '0',
                          terms: e.target.value === 'profit_transfer' ? 'Profit transfer - no repayment required' : ''
                        })}
                        className="mr-2"
                      />
                      💰 Business Loan
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="transferType"
                        value="profit_transfer"
                        checked={newLoan.transferType === 'profit_transfer'}
                        onChange={(e) => setNewLoan({
                          ...newLoan,
                          transferType: e.target.value,
                          interestRate: '0',
                          terms: e.target.value === 'profit_transfer' ? 'Profit transfer - no repayment required' : ''
                        })}
                        className="mr-2"
                      />
                      📈 Profit Transfer
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Lender Business *
                  </label>
                  <select
                    value={newLoan.lenderBusinessId}
                    onChange={(e) => setNewLoan({...newLoan, lenderBusinessId: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">Select lender business</option>
                    {businesses.filter(business => business.isUserBusiness).map(business => (
                      <option key={business.id} value={business.id}>
                        {business.name} ({business.type}){business.isUmbrellaBusiness ? ' - Umbrella' : ''}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Lender Business Balance Display */}
                {newLoan.lenderBusinessId && (
                  <BusinessBalanceDisplay
                    businessId={newLoan.lenderBusinessId}
                    businessName={businesses.find(b => b.id === newLoan.lenderBusinessId)?.name || 'Selected Business'}
                    showRefreshButton={true}
                    variant="compact"
                  />
                )}

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Borrower Business *
                  </label>
                  <select
                    value={newLoan.borrowerBusinessId}
                    onChange={(e) => setNewLoan({...newLoan, borrowerBusinessId: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">Select borrower business</option>
                    {businesses.map(business => (
                      <option
                        key={business.id}
                        value={business.id}
                        disabled={business.id === newLoan.lenderBusinessId}
                      >
                        {business.name} ({business.type})
                        {business.isUserBusiness ? ' - Your Business' : ' - External'}
                        {business.isUmbrellaBusiness ? ' - Umbrella' : ''}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-secondary mb-2">
                      Principal Amount ($) *
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      min="0.01"
                      value={newLoan.principalAmount}
                      onChange={(e) => setNewLoan({...newLoan, principalAmount: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="0.00"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-secondary mb-2">
                      Interest Rate (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      min="0"
                      max="100"
                      value={newLoan.interestRate}
                      onChange={(e) => setNewLoan({...newLoan, interestRate: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="0.0"
                    />
                  </div>
                </div>

                {/* Loan Amount Validation */}
                {loanValidation && (
                  <BalanceValidationWarning
                    validation={loanValidation}
                    businessName={businesses.find(b => b.id === newLoan.lenderBusinessId)?.name || 'Lender Business'}
                    transactionType="loan"
                  />
                )}

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Payment Terms
                  </label>
                  <textarea
                    value={newLoan.terms}
                    onChange={(e) => setNewLoan({...newLoan, terms: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., Monthly payments, due in 6 months..."
                    rows={2}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Notes
                  </label>
                  <textarea
                    value={newLoan.notes}
                    onChange={(e) => setNewLoan({...newLoan, notes: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Additional notes or agreements..."
                    rows={2}
                  />
                </div>

                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowCreateLoanModal(false)}
                    className="px-4 py-2 text-sm font-medium text-secondary bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={loanValidation && !loanValidation.isValid}
                    className={`px-4 py-2 text-sm font-medium border border-transparent rounded-md ${
                      loanValidation && !loanValidation.isValid
                        ? 'text-gray-400 bg-gray-300 dark:bg-gray-600 dark:text-gray-500 cursor-not-allowed'
                        : 'text-white bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    {loanValidation && !loanValidation.isValid ? 'Insufficient Funds' : 'Create Loan'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Loan Details Modal */}
        {showLoanDetailsModal && selectedLoan && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-xl font-semibold text-primary">Loan Details - {selectedLoan.loanNumber}</h2>
                <button
                  onClick={() => setShowLoanDetailsModal(false)}
                  className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                >
                  ✕
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-secondary">Principal Amount</label>
                    <p className="text-lg font-semibold text-primary">${selectedLoan.principalAmount.toFixed(2)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-secondary">Remaining Balance</label>
                    <p className="text-lg font-semibold text-orange-600">${selectedLoan.remainingBalance.toFixed(2)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-secondary">Interest Rate</label>
                    <p className="text-lg font-semibold text-primary">{selectedLoan.interestRate}%</p>
                  </div>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-secondary">Status</label>
                    <span className={`px-2 py-1 text-xs font-medium rounded ${
                      selectedLoan.status === 'active' 
                        ? 'bg-green-100 text-green-800' 
                        : selectedLoan.status === 'paid'
                        ? 'bg-gray-100 text-gray-800'
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {selectedLoan.status.charAt(0).toUpperCase() + selectedLoan.status.slice(1)}
                    </span>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-secondary">Loan Date</label>
                    <p className="text-primary">{formatDate(selectedLoan.loanDate)}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-secondary">Lender → Borrower</label>
                    <p className="text-primary">
                      {selectedLoan.lenderType === 'personal' ? 'Personal' : selectedLoan.lenderBusiness?.name || 'Your Business'} → {selectedLoan.borrowerBusiness.name}
                    </p>
                  </div>
                </div>
              </div>

              {selectedLoan.terms && (
                <div className="mb-6">
                  <label className="block text-sm font-medium text-secondary mb-2">Payment Terms</label>
                  <p className="text-primary bg-gray-50 dark:bg-gray-700 p-3 rounded">{selectedLoan.terms}</p>
                </div>
              )}

              {selectedLoan.notes && (
                <div className="mb-6">
                  <label className="block text-sm font-medium text-secondary mb-2">Notes</label>
                  <p className="text-primary bg-gray-50 dark:bg-gray-700 p-3 rounded">{selectedLoan.notes}</p>
                </div>
              )}

              {/* Transaction History */}
              <div>
                <h3 className="text-lg font-semibold text-primary mb-4">Transaction History</h3>
                {selectedLoan.loanTransactions.length === 0 ? (
                  <p className="text-secondary">No transactions yet.</p>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="w-full text-sm">
                      <thead className="bg-gray-50 dark:bg-gray-700">
                        <tr>
                          <th className="px-3 py-2 text-left text-xs font-medium text-secondary uppercase">Date</th>
                          <th className="px-3 py-2 text-left text-xs font-medium text-secondary uppercase">Type</th>
                          <th className="px-3 py-2 text-left text-xs font-medium text-secondary uppercase">Amount</th>
                          <th className="px-3 py-2 text-left text-xs font-medium text-secondary uppercase">Description</th>
                          <th className="px-3 py-2 text-left text-xs font-medium text-secondary uppercase">Source</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {selectedLoan.loanTransactions.map(transaction => (
                          <tr key={transaction.id}>
                            <td className="px-3 py-2 text-primary">
                              {formatDate(transaction.transactionDate)}
                            </td>
                            <td className="px-3 py-2">
                              <span className={`px-2 py-1 text-xs font-medium rounded ${
                                transaction.transactionType === 'payment' 
                                  ? 'bg-green-100 text-green-800'
                                  : 'bg-blue-100 text-blue-800'
                              }`}>
                                {transaction.transactionType === 'payment' ? 'Payment' : 'Advance'}
                              </span>
                            </td>
                            <td className="px-3 py-2 font-medium text-primary">
                              ${transaction.amount.toFixed(2)}
                            </td>
                            <td className="px-3 py-2 text-primary">{transaction.description}</td>
                            <td className="px-3 py-2">
                              <span className={`px-2 py-1 text-xs font-medium rounded ${
                                transaction.isAutoGenerated 
                                  ? 'bg-purple-100 text-purple-800'
                                  : 'bg-gray-100 text-gray-800'
                              }`}>
                                {transaction.isAutoGenerated ? 'Auto' : 'Manual'}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Payment Modal */}
        {showPaymentModal && selectedLoan && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
              <div className="flex justify-between items-start mb-4">
                <h2 className="text-xl font-semibold text-primary">Make Payment - {selectedLoan.loanNumber}</h2>
                <button
                  onClick={() => setShowPaymentModal(false)}
                  className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
                >
                  ✕
                </button>
              </div>

              <div className="mb-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <div className="text-sm text-secondary space-y-1">
                  <div><strong>Lender → Borrower:</strong> {selectedLoan.lenderType === 'personal' ? 'Personal' : selectedLoan.lenderBusiness?.name || 'Your Business'} → {selectedLoan.borrowerBusiness.name}</div>
                  <div><strong>Current Balance:</strong> ${selectedLoan.remainingBalance.toFixed(2)}</div>
                  <div><strong>Interest Rate:</strong> {selectedLoan.interestRate}%</div>
                </div>
              </div>

              {/* Business Balance Display for Payment */}
              {getPaymentBusinessId() && (
                <BusinessBalanceDisplay
                  businessId={getPaymentBusinessId()}
                  businessName={
                    newPayment.transactionType === 'payment'
                      ? selectedLoan?.borrowerBusiness.name || 'Borrower Business'
                      : selectedLoan?.lenderBusiness?.name || 'Lender Business'
                  }
                  showRefreshButton={true}
                  variant="compact"
                  className="mb-4"
                />
              )}

              <form onSubmit={handleMakePayment} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-secondary mb-3">
                    Transaction Type *
                  </label>
                  <div className="flex gap-4">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="paymentType"
                        value="payment"
                        checked={newPayment.transactionType === 'payment'}
                        onChange={(e) => setNewPayment({...newPayment, transactionType: e.target.value})}
                        className="mr-2"
                      />
                      Payment (reduce balance)
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="paymentType"
                        value="advance"
                        checked={newPayment.transactionType === 'advance'}
                        onChange={(e) => setNewPayment({...newPayment, transactionType: e.target.value})}
                        className="mr-2"
                      />
                      Additional Advance
                    </label>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-secondary mb-2">
                      Amount ($) *
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      min="0.01"
                      max={newPayment.transactionType === 'payment' ? selectedLoan.remainingBalance : undefined}
                      value={newPayment.amount}
                      onChange={(e) => setNewPayment({...newPayment, amount: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="0.00"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-secondary mb-2">
                      Date *
                    </label>
                    <input
                      type="date"
                      value={newPayment.transactionDate}
                      onChange={(e) => setNewPayment({...newPayment, transactionDate: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Description *
                  </label>
                  <input
                    type="text"
                    value={newPayment.description}
                    onChange={(e) => setNewPayment({...newPayment, description: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Payment description..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-secondary mb-2">
                    Notes
                  </label>
                  <textarea
                    value={newPayment.notes}
                    onChange={(e) => setNewPayment({...newPayment, notes: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-primary focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Additional notes..."
                    rows={2}
                  />
                </div>

                {/* Payment Amount Validation */}
                {paymentValidation && (
                  <BalanceValidationWarning
                    validation={paymentValidation}
                    businessName={
                      newPayment.transactionType === 'payment'
                        ? selectedLoan?.borrowerBusiness.name || 'Borrower Business'
                        : selectedLoan?.lenderBusiness?.name || 'Lender Business'
                    }
                    transactionType={newPayment.transactionType === 'payment' ? 'payment' : 'advance'}
                  />
                )}

                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowPaymentModal(false)}
                    className="px-4 py-2 text-sm font-medium text-secondary bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={paymentValidation && !paymentValidation.isValid}
                    className={`px-4 py-2 text-sm font-medium border border-transparent rounded-md ${
                      paymentValidation && !paymentValidation.isValid
                        ? 'text-gray-400 bg-gray-300 dark:bg-gray-600 dark:text-gray-500 cursor-not-allowed'
                        : 'text-white bg-green-600 hover:bg-green-700'
                    }`}
                  >
                    {paymentValidation && !paymentValidation.isValid
                      ? 'Insufficient Funds'
                      : `Process ${newPayment.transactionType === 'payment' ? 'Payment' : 'Advance'}`}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </ContentLayout>
    </BusinessProtectedRoute>
  )
}