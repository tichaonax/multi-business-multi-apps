'use client'

import { BusinessProtectedRoute } from '@/components/auth/business-protected-route'
import { ContentLayout } from '@/components/layout/content-layout'
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { formatDateByFormat } from '@/lib/country-codes'
import { useDateFormat } from '@/contexts/settings-context'
import Link from 'next/link'

interface LoanAnalytics {
  totalLoans: number
  activeLoans: number
  totalPrincipal: number
  totalOutstanding: number
  totalPaid: number
  averageInterestRate: number
  loansByStatus: Record<string, number>
  monthlyTrends: Array<{
    month: string
    loansCreated: number
    paymentsReceived: number
    totalAmount: number
  }>
  crossReferences: Array<{
    id: string
    loanNumber: string
    personalExpenseCount: number
    businessTransactionCount: number
    autoGeneratedCount: number
    manualCount: number
    lastActivity: string
  }>
}

export default function LoanAnalyticsPage() {
  const { data: session } = useSession()
  const globalDateFormat = useDateFormat()
  const [analytics, setAnalytics] = useState<LoanAnalytics | null>(null)
  const [loading, setLoading] = useState(true)

  // Helper function to format dates according to global settings
  const formatDate = (dateString: string) => {
    if (!dateString) return ''
    return formatDateByFormat(dateString, globalDateFormat)
  }

  useEffect(() => {
    fetchAnalytics()
  }, [])

  const fetchAnalytics = async () => {
    try {
      const response = await fetch('/api/business/loans/analytics', { credentials: 'include' })
      if (response.ok) {
        const data = await response.json()
        setAnalytics(data)
      } else {
        console.error('Failed to fetch analytics')
      }
    } catch (error) {
      console.error('Failed to fetch analytics:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <BusinessProtectedRoute requiredPermission="canAccessFinancialData">
        <ContentLayout title="Loan Analytics" breadcrumb={[]}>
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="text-lg text-secondary">Loading analytics...</div>
            </div>
          </div>
        </ContentLayout>
      </BusinessProtectedRoute>
    )
  }

  if (!analytics) {
    return (
      <BusinessProtectedRoute requiredPermission="canAccessFinancialData">
        <ContentLayout title="Loan Analytics" breadcrumb={[]}>
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="text-lg text-secondary">No analytics data available</div>
            </div>
          </div>
        </ContentLayout>
      </BusinessProtectedRoute>
    )
  }

  return (
    <BusinessProtectedRoute requiredPermission="canAccessFinancialData">
      <ContentLayout
        title="üìä Loan Analytics & Cross-References"
        breadcrumb={[
          { label: 'Dashboard', href: '/dashboard' },
          { label: 'Business Management', href: '/business/manage' },
          { label: 'Loans', href: '/business/manage/loans' },
          { label: 'Analytics', isActive: true }
        ]}
        headerActions={
          <Link
            href="/business/manage/loans"
            className="btn-secondary"
          >
            ‚Üê Back to Loans
          </Link>
        }
      >
        <div className="space-y-6">
          {/* Key Metrics */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Total Loans</h3>
              <p className="text-3xl font-bold text-blue-600">{analytics.totalLoans}</p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Active Loans</h3>
              <p className="text-3xl font-bold text-green-600">{analytics.activeLoans}</p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Total Outstanding</h3>
              <p className="text-3xl font-bold text-orange-600">${analytics.totalOutstanding.toFixed(2)}</p>
            </div>
            <div className="card p-6">
              <h3 className="text-lg font-semibold text-primary mb-2">Avg Interest</h3>
              <p className="text-3xl font-bold text-purple-600">{analytics.averageInterestRate.toFixed(1)}%</p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Financial Summary */}
            <div className="card p-6">
              <h3 className="text-xl font-semibold text-primary mb-4">Financial Summary</h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-secondary">Total Principal Loaned:</span>
                  <span className="font-semibold text-primary">${analytics.totalPrincipal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-secondary">Total Outstanding:</span>
                  <span className="font-semibold text-orange-600">${analytics.totalOutstanding.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-secondary">Total Payments Received:</span>
                  <span className="font-semibold text-green-600">${analytics.totalPaid.toFixed(2)}</span>
                </div>
                <div className="pt-2 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex justify-between items-center">
                    <span className="text-secondary">Collection Rate:</span>
                    <span className="font-semibold text-primary">
                      {analytics.totalPrincipal > 0 
                        ? ((analytics.totalPaid / analytics.totalPrincipal) * 100).toFixed(1)
                        : 0
                      }%
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Loan Status Breakdown */}
            <div className="card p-6">
              <h3 className="text-xl font-semibold text-primary mb-4">Loan Status Distribution</h3>
              <div className="space-y-3">
                {Object.entries(analytics.loansByStatus).map(([status, count]) => (
                  <div key={status} className="flex justify-between items-center">
                    <span className="capitalize text-secondary">{status.replace('_', ' ')}:</span>
                    <div className="flex items-center gap-2">
                      <span className="font-semibold text-primary">{count}</span>
                      <div className="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full ${
                            status === 'active' ? 'bg-green-500' : 
                            status === 'paid' ? 'bg-blue-500' : 
                            status === 'overdue' ? 'bg-red-500' : 'bg-gray-400'
                          }`}
                          style={{ width: `${analytics.totalLoans > 0 ? (count / analytics.totalLoans) * 100 : 0}%` }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Monthly Trends */}
          {analytics.monthlyTrends.length > 0 && (
            <div className="card p-6">
              <h3 className="text-xl font-semibold text-primary mb-4">Monthly Trends</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th className="px-4 py-2 text-left text-xs font-medium text-secondary uppercase">Month</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-secondary uppercase">New Loans</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-secondary uppercase">Payments Received</th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-secondary uppercase">Total Amount</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                    {analytics.monthlyTrends.map((trend, index) => (
                      <tr key={index}>
                        <td className="px-4 py-2 text-sm text-primary">{trend.month}</td>
                        <td className="px-4 py-2 text-sm text-primary">{trend.loansCreated}</td>
                        <td className="px-4 py-2 text-sm text-primary">{trend.paymentsReceived}</td>
                        <td className="px-4 py-2 text-sm font-medium text-primary">${trend.totalAmount.toFixed(2)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Cross-Reference Tracking */}
          <div className="card">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-xl font-semibold text-primary">Cross-Reference Tracking</h3>
              <p className="text-sm text-secondary mt-1">
                Track transaction relationships between Personal and Business accounts
              </p>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Loan Number</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Personal Transactions</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Business Transactions</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Auto Generated</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Manual</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Last Activity</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-secondary uppercase">Status</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {analytics.crossReferences.length === 0 ? (
                    <tr>
                      <td colSpan={7} className="px-6 py-8 text-center text-secondary">
                        No cross-reference data available
                      </td>
                    </tr>
                  ) : (
                    analytics.crossReferences.map((ref) => (
                      <tr key={ref.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-primary">
                          <Link 
                            href={`/business/manage/loans`} 
                            className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                          >
                            {ref.loanNumber}
                          </Link>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                            {ref.personalExpenseCount} txn
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded text-xs">
                            {ref.businessTransactionCount} txn
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          <span className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs">
                            {ref.autoGeneratedCount} auto
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-primary">
                          <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs">
                            {ref.manualCount} manual
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-secondary">
                          {formatDate(ref.lastActivity)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <span className={`px-2 py-1 text-xs font-medium rounded ${
                            ref.autoGeneratedCount > 0 && ref.personalExpenseCount > 0
                              ? 'bg-green-100 text-green-800'
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {ref.autoGeneratedCount > 0 && ref.personalExpenseCount > 0 ? 'Synced' : 'Partial'}
                          </span>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </ContentLayout>
    </BusinessProtectedRoute>
  )
}