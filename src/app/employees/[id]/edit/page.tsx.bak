'use client'

import { useSession } from 'next-auth/react'
import { useRouter, useParams } from 'next/navigation'
import { useEffect, useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { ContentLayout } from '@/components/layout/content-layout'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { ArrowLeft, Save, AlertTriangle } from 'lucide-react'
import { hasPermission } from '@/lib/permission-utils'

// Form validation schema
const editEmployeeSchema = z.object({
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  email: z.string().email('Invalid email address').optional(),
  phone: z.string().min(1, 'Phone number is required'),
  nationalId: z.string().min(1, 'National ID is required'),
  address: z.string().optional(),
  dateOfBirth: z.string().optional(),
  jobTitleId: z.string().min(1, 'Job title is required'),
  compensationTypeId: z.string().min(1, 'Compensation type is required'),
  supervisorId: z.string().optional(),
  primaryBusinessId: z.string().min(1, 'Primary business is required'),
  hireDate: z.string().min(1, 'Hire date is required'),
  startDate: z.string().optional(),
  terminationDate: z.string().optional(),
  employmentStatus: z.string(),
  customResponsibilities: z.string().optional(),
  notes: z.string().optional(),
  isActive: z.boolean()
})

type EditEmployeeForm = z.infer<typeof editEmployeeSchema>

interface EmployeeData {
  id: string
  firstName: string
  lastName: string
  fullName: string
  email: string | null
  phone: string
  nationalId: string
  address: string | null
  dateOfBirth: string | null
  jobTitleId: string
  compensationTypeId: string
  supervisorId: string | null
  primaryBusinessId: string
  hireDate: string
  startDate: string | null
  terminationDate: string | null
  employmentStatus: string
  customResponsibilities: string | null
  notes: string | null
  isActive: boolean
  jobTitle: {
    id: string
    title: string
    department: string | null
  }
  compensationType: {
    id: string
    name: string
    type: string
  }
  primaryBusiness: {
    id: string
    name: string
    type: string
  }
}

export default function EditEmployeePage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const params = useParams()
  const employeeId = params.id as string

  const [employee, setEmployee] = useState<EmployeeData | null>(null)
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const [jobTitles, setJobTitles] = useState<any[]>([])
  const [compensationTypes, setCompensationTypes] = useState<any[]>([])
  const [businesses, setBusinesses] = useState<any[]>([])
  const [employees, setEmployees] = useState<any[]>([])

  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors }
  } = useForm<EditEmployeeForm>({
    resolver: zodResolver(editEmployeeSchema)
  })

  // Permission checks
  const canEditEmployees = session?.user && hasPermission(session.user, 'canEditEmployees')

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin')
    }
  }, [status, router])

  useEffect(() => {
    if (session && employeeId && canEditEmployees) {
      fetchEmployeeData()
      fetchDropdownData()
    } else if (session && !canEditEmployees) {
      setError('You do not have permission to edit employees')
      setLoading(false)
    }
  }, [session, employeeId, canEditEmployees])

  const fetchEmployeeData = async () => {
    try {
      setLoading(true)
      setError(null)

      const response = await fetch(`/api/employees/${employeeId}`)
      if (!response.ok) {
        throw new Error('Failed to fetch employee data')
      }

      const employeeData = await response.json()
      setEmployee(employeeData)

      // Set form values
      setValue('firstName', employeeData.firstName)
      setValue('lastName', employeeData.lastName)
      setValue('email', employeeData.email || '')
      setValue('phone', employeeData.phone)
      setValue('nationalId', employeeData.nationalId)
      setValue('address', employeeData.address || '')
      setValue('dateOfBirth', employeeData.dateOfBirth ? employeeData.dateOfBirth.split('T')[0] : '')
      setValue('jobTitleId', employeeData.jobTitleId)
      setValue('compensationTypeId', employeeData.compensationTypeId)
      setValue('supervisorId', employeeData.supervisorId || '')
      setValue('primaryBusinessId', employeeData.primaryBusinessId)
      setValue('hireDate', employeeData.hireDate ? employeeData.hireDate.split('T')[0] : '')
      setValue('startDate', employeeData.startDate ? employeeData.startDate.split('T')[0] : '')
      setValue('terminationDate', employeeData.terminationDate ? employeeData.terminationDate.split('T')[0] : '')
      setValue('employmentStatus', employeeData.employmentStatus)
      setValue('customResponsibilities', employeeData.customResponsibilities || '')
      setValue('notes', employeeData.notes || '')
      setValue('isActive', employeeData.isActive)

    } catch (err) {
      console.error('Error fetching employee:', err)
      setError(err instanceof Error ? err.message : 'Failed to fetch employee data')
    } finally {
      setLoading(false)
    }
  }

  const fetchDropdownData = async () => {
    try {
      const [jobTitlesRes, compensationTypesRes, businessesRes, employeesRes] = await Promise.all([
        fetch('/api/job-titles'),
        fetch('/api/compensation-types'),
        fetch('/api/businesses'),
        fetch('/api/employees')
      ])

      if (jobTitlesRes.ok) {
        const jobTitlesData = await jobTitlesRes.json()
        setJobTitles(Array.isArray(jobTitlesData) ? jobTitlesData : jobTitlesData.jobTitles || [])
      }

      if (compensationTypesRes.ok) {
        const compensationTypesData = await compensationTypesRes.json()
        setCompensationTypes(Array.isArray(compensationTypesData) ? compensationTypesData : compensationTypesData.compensationTypes || [])
      }

      if (businessesRes.ok) {
        const businessesData = await businessesRes.json()
        setBusinesses(Array.isArray(businessesData) ? businessesData : businessesData.businesses || [])
      }

      if (employeesRes.ok) {
        const employeesData = await employeesRes.json()
        const employeesList = Array.isArray(employeesData) ? employeesData : employeesData.employees || []
        // Filter out current employee from supervisor options
        setEmployees(employeesList.filter((emp: any) => emp.id !== employeeId))
      }

    } catch (err) {
      console.error('Error fetching dropdown data:', err)
    }
  }

  const onSubmit = async (formData: EditEmployeeForm) => {
    if (!employee) return

    try {
      setSubmitting(true)
      setError(null)

      const response = await fetch(`/api/employees/${employeeId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to update employee')
      }

      // Success - redirect back to employee detail page
      router.push(`/employees/${employeeId}`)
    } catch (err) {
      console.error('Error updating employee:', err)
      setError(err instanceof Error ? err.message : 'Failed to update employee')
    } finally {
      setSubmitting(false)
    }
  }

  if (status === 'loading' || loading) {
    return (
      <ContentLayout title="Edit Employee">
        <div className="flex items-center justify-center py-12">
          <div className="text-secondary">Loading employee data...</div>
        </div>
      </ContentLayout>
    )
  }

  if (error && !employee) {
    return (
      <ContentLayout
        title="Edit Employee"
        breadcrumb={[
          { label: 'Dashboard', href: '/dashboard' },
          { label: 'Employees', href: '/employees' },
          { label: 'Edit Employee', isActive: true }
        ]}
      >
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </ContentLayout>
    )
  }

  if (!employee) {
    return (
      <ContentLayout
        title="Edit Employee"
        breadcrumb={[
          { label: 'Dashboard', href: '/dashboard' },
          { label: 'Employees', href: '/employees' },
          { label: 'Edit Employee', isActive: true }
        ]}
      >
        <div className="text-center py-12">
          <p className="text-secondary">Employee not found</p>
        </div>
      </ContentLayout>
    )
  }

  return (
    <ContentLayout
      title={`Edit ${employee.fullName}`}
      subtitle={`${employee.jobTitle.title} â€¢ ${employee.nationalId}`}
      breadcrumb={[
        { label: 'Dashboard', href: '/dashboard' },
        { label: 'Employees', href: '/employees' },
        { label: employee.fullName, href: `/employees/${employee.id}` },
        { label: 'Edit', isActive: true }
      ]}
      headerActions={
        <Button
          variant="secondary"
          onClick={() => router.push(`/employees/${employee.id}`)}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Employee
        </Button>
      }
    >
      <div className="space-y-6">
        {error && (
          <Alert>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    First Name *
                  </label>
                  <Input
                    {...register('firstName')}
                    className={errors.firstName ? 'border-red-500' : ''}
                  />
                  {errors.firstName && (
                    <p className="text-red-500 text-xs mt-1">{errors.firstName.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Last Name *
                  </label>
                  <Input
                    {...register('lastName')}
                    className={errors.lastName ? 'border-red-500' : ''}
                  />
                  {errors.lastName && (
                    <p className="text-red-500 text-xs mt-1">{errors.lastName.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Email
                  </label>
                  <Input
                    type="email"
                    {...register('email')}
                    className={errors.email ? 'border-red-500' : ''}
                  />
                  {errors.email && (
                    <p className="text-red-500 text-xs mt-1">{errors.email.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Phone *
                  </label>
                  <Input
                    {...register('phone')}
                    className={errors.phone ? 'border-red-500' : ''}
                  />
                  {errors.phone && (
                    <p className="text-red-500 text-xs mt-1">{errors.phone.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    National ID *
                  </label>
                  <Input
                    {...register('nationalId')}
                    className={errors.nationalId ? 'border-red-500' : ''}
                  />
                  {errors.nationalId && (
                    <p className="text-red-500 text-xs mt-1">{errors.nationalId.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Date of Birth
                  </label>
                  <Input
                    type="date"
                    {...register('dateOfBirth')}
                    className={errors.dateOfBirth ? 'border-red-500' : ''}
                  />
                  {errors.dateOfBirth && (
                    <p className="text-red-500 text-xs mt-1">{errors.dateOfBirth.message}</p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-primary mb-1">
                  Address
                </label>
                <Input
                  {...register('address')}
                  className={errors.address ? 'border-red-500' : ''}
                />
                {errors.address && (
                  <p className="text-red-500 text-xs mt-1">{errors.address.message}</p>
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Employment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Job Title *
                  </label>
                  <select
                    {...register('jobTitleId')}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.jobTitleId ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">Select Job Title</option>
                    {jobTitles.map((jobTitle) => (
                      <option key={jobTitle.id} value={jobTitle.id}>
                        {jobTitle.title} {jobTitle.department && `(${jobTitle.department})`}
                      </option>
                    ))}
                  </select>
                  {errors.jobTitleId && (
                    <p className="text-red-500 text-xs mt-1">{errors.jobTitleId.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Compensation Type *
                  </label>
                  <select
                    {...register('compensationTypeId')}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.compensationTypeId ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">Select Compensation Type</option>
                    {compensationTypes.map((compensationType) => (
                      <option key={compensationType.id} value={compensationType.id}>
                        {compensationType.name} ({compensationType.type})
                      </option>
                    ))}
                  </select>
                  {errors.compensationTypeId && (
                    <p className="text-red-500 text-xs mt-1">{errors.compensationTypeId.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Supervisor
                  </label>
                  <select
                    {...register('supervisorId')}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.supervisorId ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">No Supervisor</option>
                    {employees.map((emp) => (
                      <option key={emp.id} value={emp.id}>
                        {emp.fullName}
                      </option>
                    ))}
                  </select>
                  {errors.supervisorId && (
                    <p className="text-red-500 text-xs mt-1">{errors.supervisorId.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Primary Business *
                  </label>
                  <select
                    {...register('primaryBusinessId')}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.primaryBusinessId ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="">Select Business</option>
                    {businesses.map((business) => (
                      <option key={business.id} value={business.id}>
                        {business.name} ({business.type})
                      </option>
                    ))}
                  </select>
                  {errors.primaryBusinessId && (
                    <p className="text-red-500 text-xs mt-1">{errors.primaryBusinessId.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Hire Date *
                  </label>
                  <Input
                    type="date"
                    {...register('hireDate')}
                    className={errors.hireDate ? 'border-red-500' : ''}
                  />
                  {errors.hireDate && (
                    <p className="text-red-500 text-xs mt-1">{errors.hireDate.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Start Date
                  </label>
                  <Input
                    type="date"
                    {...register('startDate')}
                    className={errors.startDate ? 'border-red-500' : ''}
                  />
                  {errors.startDate && (
                    <p className="text-red-500 text-xs mt-1">{errors.startDate.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Employment Status
                  </label>
                  <select
                    {...register('employmentStatus')}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.employmentStatus ? 'border-red-500' : ''
                    }`}
                  >
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                    <option value="terminated">Terminated</option>
                  </select>
                  {errors.employmentStatus && (
                    <p className="text-red-500 text-xs mt-1">{errors.employmentStatus.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-primary mb-1">
                    Termination Date
                  </label>
                  <Input
                    type="date"
                    {...register('terminationDate')}
                    className={errors.terminationDate ? 'border-red-500' : ''}
                  />
                  {errors.terminationDate && (
                    <p className="text-red-500 text-xs mt-1">{errors.terminationDate.message}</p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-primary mb-1">
                  Custom Responsibilities
                </label>
                <textarea
                  {...register('customResponsibilities')}
                  rows={3}
                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.customResponsibilities ? 'border-red-500' : ''
                  }`}
                  placeholder="Enter any custom responsibilities..."
                />
                {errors.customResponsibilities && (
                  <p className="text-red-500 text-xs mt-1">{errors.customResponsibilities.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-primary mb-1">
                  Notes
                </label>
                <textarea
                  {...register('notes')}
                  rows={3}
                  className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.notes ? 'border-red-500' : ''
                  }`}
                  placeholder="Enter any additional notes..."
                />
                {errors.notes && (
                  <p className="text-red-500 text-xs mt-1">{errors.notes.message}</p>
                )}
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  {...register('isActive')}
                  className="rounded"
                />
                <label className="text-sm font-medium text-primary">
                  Employee is Active
                </label>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end space-x-4">
            <Button
              type="button"
              variant="secondary"
              onClick={() => router.push(`/employees/${employee.id}`)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={submitting}
              className="flex items-center gap-2"
            >
              <Save className="h-4 w-4" />
              {submitting ? 'Saving...' : 'Save Changes'}
            </Button>
          </div>
        </form>
      </div>
    </ContentLayout>
  )
}