#!/usr/bin/env node

/**
 * Install Git Hooks for Smart Deployment
 * Sets up post-merge hook to provide intelligent setup guidance
 */

const fs = require('fs')
const path = require('path')

const ROOT_DIR = path.join(__dirname, '..')
const HOOKS_DIR = path.join(ROOT_DIR, '.git', 'hooks')
const POST_MERGE_HOOK = path.join(HOOKS_DIR, 'post-merge')

function log(message, type = 'INFO') {
  const colors = {
    INFO: '\x1b[36m',
    SUCCESS: '\x1b[32m',
    WARN: '\x1b[33m',
    ERROR: '\x1b[31m'
  }
  const reset = '\x1b[0m'
  console.log(`${colors[type]}[${type}] ${message}${reset}`)
}

function main() {
  console.log('\n' + '='.repeat(60))
  console.log('ü™ù INSTALLING GIT HOOKS')
  console.log('='.repeat(60) + '\n')

  // Check if .git directory exists
  if (!fs.existsSync(GIT_DIR)) {
    console.error('‚ùå Error: Not a git repository')
    console.error('   Initialize git first: git init')
    process.exit(1)
  }

  // Check if hooks directory exists
  if (!fs.existsSync(HOOKS_DIR)) {
    console.error('‚ùå Error: Hooks directory not found at .githooks/')
    process.exit(1)
  }

  try {
    // Configure git to use the custom hooks directory
    console.log('üìÅ Configuring git hooks directory...')
    execSync('git config core.hooksPath .githooks', {
      cwd: ROOT_DIR,
      stdio: 'inherit'
    })

    console.log('‚úÖ Git configured to use .githooks/ directory')

    // Make hooks executable (Unix-like systems)
    if (process.platform !== 'win32') {
      console.log('\nüîß Making hooks executable...')
      const hookFiles = fs.readdirSync(HOOKS_DIR)
        .filter(file => !file.endsWith('.ps1') && !file.endsWith('.md'))

      for (const hookFile of hookFiles) {
        const hookPath = path.join(HOOKS_DIR, hookFile)
        try {
          fs.chmodSync(hookPath, '755')
          console.log(`   ‚úì ${hookFile}`)
        } catch (err) {
          console.warn(`   ‚ö†Ô∏è  Could not make ${hookFile} executable: ${err.message}`)
        }
      }
    }

    console.log('\n' + '='.repeat(60))
    console.log('‚úÖ GIT HOOKS INSTALLED SUCCESSFULLY!')
    console.log('='.repeat(60))
    console.log('\nüìñ Installed hooks:')
    console.log('   ‚Ä¢ post-merge: Automatically rebuilds service after git pull')
    console.log('\nüí° The hooks will run automatically on relevant git operations.')
    console.log('   To disable: git config core.hooksPath .git/hooks\n')

  } catch (error) {
    console.error('\n‚ùå FAILED TO INSTALL HOOKS')
    console.error(`Error: ${error.message}\n`)
    process.exit(1)
  }
}

/**
 * Install the post-merge hook for smart deployment
 */
function installSmartHook() {
  try {
    const HOOKS_DIR_NEW = path.join(ROOT_DIR, '.git', 'hooks')
    const POST_MERGE_HOOK = path.join(HOOKS_DIR_NEW, 'post-merge')
    
    if (!fs.existsSync(HOOKS_DIR_NEW)) {
      console.error('‚ùå Git hooks directory not found - this may not be a git repository')
      return false
    }

    const hookScript = `#!/bin/bash
# Post-merge hook for smart deployment guidance
# Auto-generated by install-git-hooks.js

node scripts/post-merge-hook.js
`

    fs.writeFileSync(POST_MERGE_HOOK, hookScript)
    
    if (process.platform !== 'win32') {
      fs.chmodSync(POST_MERGE_HOOK, '755')
    }
    
    console.log('‚úÖ Smart post-merge hook installed successfully')
    console.log(`   Location: ${POST_MERGE_HOOK}`)
    return true
    
  } catch (error) {
    console.error(`‚ùå Failed to install smart hook: ${error.message}`)
    return false
  }
}

// Check command line arguments
const args = process.argv.slice(2)
if (args.includes('--smart') || args.includes('-s')) {
  console.log('\nüîó Installing Smart Deployment Hook...\n')
  const success = installSmartHook()
  if (success) {
    console.log('\n‚úÖ Smart hook installed! It will run automatically after git pull/merge.')
    console.log('   Test it with: node scripts/post-merge-hook.js\n')
  }
} else {
  main()
}
