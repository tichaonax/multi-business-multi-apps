#!/usr/bin/env node
/**
 * Migration Data Seeding Script
 * Seeds essential reference data and admin user for production deployments
 *
 * This script is designed to be run automatically after migrations
 * and ensures all dropdown data and admin access is available.
 *
 * Usage: node scripts/seed-migration-data.js
 */

/**
 * Load environment variables from .env.local
 */
function loadEnvironmentVariables() {
  const path = require('path')
  const fs = require('fs')

  const envLocalPath = path.join(process.cwd(), '.env.local')

  if (fs.existsSync(envLocalPath)) {
    console.log('Loading environment variables from .env.local')
    const envContent = fs.readFileSync(envLocalPath, 'utf8')

    envContent.split('\n').forEach(line => {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#') && trimmedLine.includes('=')) {
        const [key, ...valueParts] = trimmedLine.split('=')
        const value = valueParts.join('=').replace(/^"(.*)"$/, '$1')
        process.env[key.trim()] = value.trim()
      }
    })
    console.log('‚úÖ Environment variables loaded from .env.local')
  } else {
    console.warn('‚ö†Ô∏è  .env.local file not found, using default environment')
  }
}

// Load environment variables first
loadEnvironmentVariables()

const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

/**
 * Seed ID Format Templates
 */
async function seedIdTemplates() {
  console.log('üÜî Seeding ID format templates...')

  const templates = [
    {
      id: 'zw-national-id',
      name: 'Zimbabwe National ID',
      countryCode: 'ZW',
      pattern: '##-######?##',
      example: '63-123456A78',
      description: 'Zimbabwe National Identity Card format',
      isActive: true
    },
    {
      id: 'za-id-number',
      name: 'South Africa ID Number',
      countryCode: 'ZA',
      pattern: '##########?#',
      example: '8001015009087',
      description: 'South African Identity Document number',
      isActive: true
    },
    {
      id: 'bw-omang',
      name: 'Botswana Omang',
      countryCode: 'BW',
      pattern: '#########',
      example: '123456789',
      description: 'Botswana National Identity Card (Omang)',
      isActive: true
    },
    {
      id: 'ke-national-id',
      name: 'Kenya National ID',
      countryCode: 'KE',
      pattern: '########',
      example: '12345678',
      description: 'Kenya National Identity Card',
      isActive: true
    },
    {
      id: 'zm-nrc',
      name: 'Zambia NRC',
      countryCode: 'ZM',
      pattern: '######/##/#',
      example: '123456/78/1',
      description: 'Zambia National Registration Card',
      isActive: true
    }
  ]

  for (const template of templates) {
    if (!prisma.idFormatTemplate || typeof prisma.idFormatTemplate.upsert !== 'function') {
      console.warn('Prisma model idFormatTemplate not available - skipping ID format templates seeding');
      break;
    }

    await prisma.idFormatTemplate.upsert({
      where: { id: template.id },
      update: template,
      create: template
    })
  }

  console.log(`‚úÖ Seeded ${templates.length} ID format templates`)
}

/**
 * Seed Phone Format Templates
 * NOTE: PhoneFormatTemplate not found in current schema - skipping
 */
async function seedPhoneTemplates() {
  console.log('üì± Phone format templates not found in schema - skipping')
  return
}

/**
 * Seed Date Format Templates
 * NOTE: DateFormatTemplate not found in current schema - skipping
 */
async function seedDateTemplates() {
  console.log('üìÖ Date format templates not found in schema - skipping')
  return
}

/**
 * Seed Job Titles
 */
async function seedJobTitles() {
  console.log('üíº Seeding job titles...')

  const jobTitles = [
    // Construction
    { title: 'Site Supervisor', description: 'Supervises construction site operations', department: 'Construction', level: 'supervisor' },
    { title: 'Civil Engineer', description: 'Designs and oversees civil engineering projects', department: 'Engineering', level: 'professional' },
    { title: 'Project Manager', description: 'Manages construction projects from start to finish', department: 'Management', level: 'manager' },
    { title: 'Mason', description: 'Skilled worker specializing in stone and brick work', department: 'Construction', level: 'skilled' },
    { title: 'Carpenter', description: 'Skilled worker specializing in wood construction', department: 'Construction', level: 'skilled' },
    { title: 'Electrician', description: 'Installs and maintains electrical systems', department: 'Construction', level: 'skilled' },
    { title: 'Plumber', description: 'Installs and maintains plumbing systems', department: 'Construction', level: 'skilled' },
    { title: 'Painter', description: 'Applies paint and finishes to buildings', department: 'Construction', level: 'skilled' },
    { title: 'Welder', description: 'Joins metal parts through welding', department: 'Construction', level: 'skilled' },
    { title: 'Foreman', description: 'Leads construction crews and ensures quality', department: 'Construction', level: 'supervisor' },

    // Management & Administration
    { title: 'General Manager', description: 'Overall business operations management', department: 'Management', level: 'senior' },
    { title: 'Operations Manager', description: 'Manages daily business operations', department: 'Operations', level: 'manager' },
    { title: 'Human Resources Manager', description: 'Manages employee relations and policies', department: 'HR', level: 'manager' },
    { title: 'Finance Manager', description: 'Manages financial operations and planning', department: 'Finance', level: 'manager' },
    { title: 'Accountant', description: 'Handles financial records and transactions', department: 'Finance', level: 'professional' },
    { title: 'Secretary', description: 'Provides administrative support', department: 'Administration', level: 'support' },
    { title: 'Receptionist', description: 'Handles front desk and customer service', department: 'Administration', level: 'support' },

    // Sales & Marketing
    { title: 'Sales Manager', description: 'Manages sales team and strategies', department: 'Sales', level: 'manager' },
    { title: 'Sales Representative', description: 'Sells products and services to customers', department: 'Sales', level: 'professional' },
    { title: 'Marketing Manager', description: 'Develops and executes marketing strategies', department: 'Marketing', level: 'manager' },

    // Operations
    { title: 'Warehouse Manager', description: 'Manages warehouse operations and inventory', department: 'Operations', level: 'manager' },
    { title: 'Inventory Clerk', description: 'Tracks and manages inventory levels', department: 'Operations', level: 'support' },
    { title: 'Quality Control Inspector', description: 'Ensures quality standards are met', department: 'Quality', level: 'professional' },
    { title: 'Safety Officer', description: 'Ensures workplace safety compliance', department: 'Safety', level: 'professional' },

    // Technical
    { title: 'IT Support Specialist', description: 'Provides technical support and maintenance', department: 'IT', level: 'professional' },
    { title: 'Network Administrator', description: 'Manages computer networks and systems', department: 'IT', level: 'professional' },

    // Customer Service
    { title: 'Customer Service Representative', description: 'Assists customers with inquiries and issues', department: 'Customer Service', level: 'support' },
    { title: 'Customer Service Manager', description: 'Manages customer service operations', department: 'Customer Service', level: 'manager' },

    // General
    { title: 'Driver', description: 'Operates company vehicles for transportation', department: 'Operations', level: 'support' }
  ]

  for (const jobTitle of jobTitles) {
    if (!prisma.jobTitle || typeof prisma.jobTitle.upsert !== 'function') {
      console.warn('Prisma model jobTitle not available - skipping job titles seeding');
      break;
    }

    await prisma.jobTitle.upsert({
      where: { title: jobTitle.title },
      update: jobTitle,
      create: {
        id: require('crypto').randomUUID(),
        ...jobTitle,
        responsibilities: [],
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
  }

  console.log(`‚úÖ Seeded ${jobTitles.length} job titles`)
}

/**
 * Seed Compensation Types
 */
async function seedCompensationTypes() {
  console.log('üí∞ Seeding compensation types...')

  const compensationTypes = [
    { name: 'Hourly Rate', type: 'hourly', baseAmount: null, commissionPercentage: null },
    { name: 'Monthly Salary', type: 'salary', baseAmount: null, commissionPercentage: null },
    { name: 'Weekly Wage', type: 'weekly', baseAmount: null, commissionPercentage: null },
    { name: 'Daily Rate', type: 'daily', baseAmount: null, commissionPercentage: null },
    { name: 'Commission Only', type: 'commission', baseAmount: null, commissionPercentage: null },
    { name: 'Base + Commission', type: 'base_commission', baseAmount: null, commissionPercentage: null },
    { name: 'Project Based', type: 'project', baseAmount: null, commissionPercentage: null },
    { name: 'Piece Rate', type: 'piece', baseAmount: null, commissionPercentage: null },
    { name: 'Annual Salary', type: 'annual', baseAmount: null, commissionPercentage: null },
    { name: 'Contract Rate', type: 'contract', baseAmount: null, commissionPercentage: null },
    { name: 'Performance Based', type: 'performance', baseAmount: null, commissionPercentage: null },
    { name: 'Retainer', type: 'retainer', baseAmount: null, commissionPercentage: null },
    { name: 'Consulting Fee', type: 'consulting', baseAmount: null, commissionPercentage: null },
    { name: 'Freelance Rate', type: 'freelance', baseAmount: null, commissionPercentage: null },
    { name: 'Stipend', type: 'stipend', baseAmount: null, commissionPercentage: null }
  ]

  for (const compensationType of compensationTypes) {
    if (!prisma.compensationType || typeof prisma.compensationType.upsert !== 'function') {
      console.warn('Prisma model compensationType not available - skipping compensation types seeding');
      break;
    }

    await prisma.compensationType.upsert({
      where: { name: compensationType.name },
      update: compensationType,
      create: {
        id: require('crypto').randomUUID(),
        ...compensationType,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
  }

  console.log(`‚úÖ Seeded ${compensationTypes.length} compensation types`)
}

/**
 * Seed Benefit Types
 */
async function seedBenefitTypes() {
  console.log('üè• Seeding benefit types...')

  const benefitTypes = [
    // Insurance Benefits
    { name: 'Health Insurance', type: 'insurance', defaultAmount: null, isPercentage: false },
    { name: 'Medical Aid', type: 'insurance', defaultAmount: null, isPercentage: false },
    { name: 'Dental Insurance', type: 'insurance', defaultAmount: null, isPercentage: false },
    { name: 'Life Insurance', type: 'insurance', defaultAmount: null, isPercentage: false },
    { name: 'Disability Insurance', type: 'insurance', defaultAmount: null, isPercentage: false },

    // Retirement Benefits
    { name: 'Pension Fund', type: 'retirement', defaultAmount: null, isPercentage: true },
    { name: 'Provident Fund', type: 'retirement', defaultAmount: null, isPercentage: true },
    { name: 'Retirement Savings', type: 'retirement', defaultAmount: null, isPercentage: true },

    // Allowances
    { name: 'Housing Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Transport Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Meal Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Phone Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Internet Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Uniform Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },
    { name: 'Tool Allowance', type: 'allowance', defaultAmount: null, isPercentage: false },

    // Time Off
    { name: 'Annual Leave', type: 'time_off', defaultAmount: 21, isPercentage: false },
    { name: 'Sick Leave', type: 'time_off', defaultAmount: 10, isPercentage: false },
    { name: 'Maternity Leave', type: 'time_off', defaultAmount: 90, isPercentage: false },
    { name: 'Paternity Leave', type: 'time_off', defaultAmount: 5, isPercentage: false },
    { name: 'Study Leave', type: 'time_off', defaultAmount: null, isPercentage: false },

    // Other Benefits
    { name: 'Performance Bonus', type: 'bonus', defaultAmount: null, isPercentage: true },
    { name: 'Annual Bonus', type: 'bonus', defaultAmount: null, isPercentage: true },
    { name: 'Overtime Pay', type: 'compensation', defaultAmount: 1.5, isPercentage: true },
    { name: 'Night Shift Differential', type: 'compensation', defaultAmount: 10, isPercentage: true },
    { name: 'Weekend Differential', type: 'compensation', defaultAmount: 15, isPercentage: true },
    { name: 'Training Budget', type: 'development', defaultAmount: null, isPercentage: false },
    { name: 'Professional Development', type: 'development', defaultAmount: null, isPercentage: false },

    // Company Benefits
    { name: 'Company Vehicle', type: 'company', defaultAmount: null, isPercentage: false }
  ]

  for (const benefitType of benefitTypes) {
    if (!prisma.benefitType || typeof prisma.benefitType.upsert !== 'function') {
      console.warn('Prisma model benefitType not available - skipping benefit types seeding');
      break;
    }

    await prisma.benefitType.upsert({
      where: { name: benefitType.name },
      update: benefitType,
      create: {
        id: require('crypto').randomUUID(),
        ...benefitType,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    })
  }

  console.log(`‚úÖ Seeded ${benefitTypes.length} benefit types`)
}

/**
 * Create Admin User
 */
async function createAdminUser() {
  console.log('üë§ Creating admin user...')

  const adminEmail = 'admin@business.local'

  // Check if admin already exists
  const existingAdmin = await prisma.user.findUnique({
    where: { email: adminEmail }
  })

  if (existingAdmin) {
    console.log('‚úÖ Admin user already exists')
    return
  }

  // Hash password
  const hashedPassword = await bcrypt.hash('admin123', 12)

  // Create admin user
  const adminUser = await prisma.user.create({
    data: {
      id: require('crypto').randomUUID(),
      email: adminEmail,
      name: 'System Administrator',
      passwordHash: hashedPassword,
      role: 'admin',
      isActive: true
    }
  })

  console.log('‚úÖ Admin user created successfully')
  console.log(`   Email: ${adminEmail}`)
  console.log(`   Password: admin123`)
  console.log(`   Role: admin`)
}

/**
 * Main seeding function
 */
async function main() {
  console.log('üå± Starting migration data seeding...')
  console.log('')

  try {
    // Preflight: ensure critical tables exist before attempting upserts
    try {
        // Cast regclass to text so Prisma can deserialize the value
        const tableCheck = await prisma.$queryRaw`SELECT to_regclass('public.id_format_templates')::text as tbl`

        // Normalize result shapes returned by Prisma: could be array of rows or single object
        let exists = false
        if (Array.isArray(tableCheck)) {
          exists = !!(tableCheck[0] && (tableCheck[0].tbl || tableCheck[0].tbl === '')) && tableCheck[0].tbl !== null
        } else if (tableCheck && typeof tableCheck === 'object') {
          exists = !!(tableCheck.tbl || tableCheck.tbl === '')
        }

        if (!exists) {
          throw new Error('Required table public.id_format_templates not found. Ensure database exists and run `npx prisma db push --force-reset` or apply migrations before seeding.')
        }
    } catch (err) {
      console.error('‚ùå Preflight check failed:', err && err.message ? err.message : err)
      throw err
    }

    // Seed all reference data
    await seedIdTemplates()
    await seedPhoneTemplates()
    await seedDateTemplates()
    await seedJobTitles()
    await seedCompensationTypes()
    await seedBenefitTypes()

    // Create admin user
    await createAdminUser()

    console.log('')
    console.log('üéâ Migration data seeding completed successfully!')
    console.log('')
    console.log('üìã Summary:')
    console.log('   ‚Ä¢ 5 ID format templates')
    console.log('   ‚Ä¢ 7 Phone format templates')
    console.log('   ‚Ä¢ 5 Date format templates')
    console.log('   ‚Ä¢ 29 Job titles')
    console.log('   ‚Ä¢ 15 Compensation types')
    console.log('   ‚Ä¢ 28 Benefit types')
    console.log('   ‚Ä¢ 1 Admin user (admin@business.local / admin123)')
    console.log('')
    console.log('‚úÖ Database is now ready for production use!')

  } catch (error) {
    console.error('‚ùå Error during seeding:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Run seeding if this file is executed directly
if (require.main === module) {
  main()
    .catch((error) => {
      console.error('üí• Seeding failed:', error)
      process.exit(1)
    })
}

module.exports = { seedMigrationData: main }